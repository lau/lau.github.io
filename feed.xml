<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Creative Deletion</title>
    <description>Lau Taarnskov's blog on tech
</description>
    <link>http://www.creativedeletion.com/</link>
    <atom:link href="http://www.creativedeletion.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 25 Oct 2019 18:26:44 -0700</pubDate>
    <lastBuildDate>Fri, 25 Oct 2019 18:26:44 -0700</lastBuildDate>
    <generator>Jekyll v3.8.3</generator>
    
      <item>
        <title>Tzdata library downloaded 10 million times - Elixir getting more popular?</title>
        <description>&lt;p&gt;This week the &lt;a href=&quot;https://hex.pm/packages/tzdata&quot;&gt;Elixir Tzdata library&lt;/a&gt; crossed 10 million downloads on hex - the package manager for &lt;a href=&quot;https://elixir-lang.org&quot;&gt;Elixir&lt;/a&gt;. It is a number displayed on the hex website and a while ago I started paying attention to it.&lt;/p&gt;

&lt;p&gt;To me the most interesting thing is that most of those downloads have happened within the last 12 months. Almost a third of them have happened in the last 90 days. Tzdata has been on hex as its own package for about 1700 days by the time of writing. Almost 30% of all of the downloads happened in the most recent 5% of the time the package has been available.&lt;/p&gt;

&lt;p&gt;Looking at other packages the numbers look similar in that they are downloaded more often than a year ago.&lt;/p&gt;

&lt;h2 id=&quot;what-does-a-download-mean&quot;&gt;What does a download mean?&lt;/h2&gt;

&lt;p&gt;From my own experience a lot of downloads happen from running automated tests on Continuous Integration systems. When you run a test, this can trigger multiple downloads of a package that is a dependency.&lt;/p&gt;

&lt;p&gt;If one project has a certain hex package as a dependency, that can easily cause hundreds or thousands of downloads over one year.&lt;/p&gt;

&lt;p&gt;On its own the number does not mean that much. But looking at the development of the numbers over time I think it can be used as a non-scientific proxy for how much a package is used. And since the trend seem to be similar across various often-downloaded packages also a proxy for use of the Elixir language. This would suggest that Elixir is getting used more.&lt;/p&gt;
</description>
        <pubDate>Thu, 24 Oct 2019 05:00:00 -0700</pubDate>
        <link>http://www.creativedeletion.com/2019/10/24/elixir-tzdata-10mm-downloads.html</link>
        <guid isPermaLink="true">http://www.creativedeletion.com/2019/10/24/elixir-tzdata-10mm-downloads.html</guid>
        
        
      </item>
    
      <item>
        <title>ElixirConf 2019 talk: Date, Time, and Time Zones in Elixir 1.9</title>
        <description>&lt;p&gt;I went to ElixirConf 2019 in Aurora, Colorado, USA to give a talk: “Date, Time, and Time Zones in Elixir 1.9”. &lt;a href=&quot;https://www.youtube.com/watch?v=_E988mvPIzU&quot;&gt;A video recording&lt;/a&gt; is available on YouTube:&lt;/p&gt;

&lt;iframe width=&quot;720&quot; height=&quot;405&quot; src=&quot;https://www.youtube.com/embed/_E988mvPIzU&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Amongst other things it covers how you can now do time zone conversions with &lt;a href=&quot;https://hexdocs.pm/elixir/DateTime.html#module-time-zone-database&quot;&gt;Elixir standard library functions&lt;/a&gt; - without libraries such as Calendar or Timex.&lt;/p&gt;
</description>
        <pubDate>Fri, 18 Oct 2019 05:00:00 -0700</pubDate>
        <link>http://www.creativedeletion.com/2019/10/18/elixirconf-2019.html</link>
        <guid isPermaLink="true">http://www.creativedeletion.com/2019/10/18/elixirconf-2019.html</guid>
        
        
      </item>
    
      <item>
        <title>How to set timestamps to UTC DateTimes in Ecto</title>
        <description>&lt;p&gt;In Ecto versions 2.1 through 3.x the &lt;a href=&quot;https://hexdocs.pm/ecto/Ecto.Schema.html#timestamps/1&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Ecto.Schema.timestamps/1&lt;/code&gt;&lt;/a&gt; feature (&lt;code class=&quot;highlighter-rouge&quot;&gt;updated_at&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;inserted_at&lt;/code&gt;) has been &lt;code class=&quot;highlighter-rouge&quot;&gt;naive_datetime&lt;/code&gt; by default. I highly recommend using &lt;code class=&quot;highlighter-rouge&quot;&gt;utc_datetime&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;utc_datetime_usec&lt;/code&gt; instead. This article will show how to do that.&lt;/p&gt;

&lt;h2 id=&quot;setting-the-type&quot;&gt;Setting the type&lt;/h2&gt;

&lt;p&gt;One way to set the timestamps type is to put the line &lt;code class=&quot;highlighter-rouge&quot;&gt;@timestamps_opts [type: :utc_datetime]&lt;/code&gt; in any module where &lt;code class=&quot;highlighter-rouge&quot;&gt;use Ecto.Schema&lt;/code&gt; is present. Example:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ecto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Schema&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;@timestamps_opts&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;type:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:utc_datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;schema&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;users&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:string&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;timestamps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s it. Add that &lt;code class=&quot;highlighter-rouge&quot;&gt;@timestamps_opts&lt;/code&gt; module attribute everywhere &lt;code class=&quot;highlighter-rouge&quot;&gt;use Ecto.Schema&lt;/code&gt; is present. You could stop reading now and go and make that change to your Ecto project. Continue reading if you want more details:&lt;/p&gt;

&lt;h2 id=&quot;more-details&quot;&gt;More details&lt;/h2&gt;

&lt;p&gt;An alternative to the &lt;code class=&quot;highlighter-rouge&quot;&gt;@timestamps_opts&lt;/code&gt; way is to pass the type as an argument when calling the timestamps/1 function in the schema:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;n&quot;&gt;schema&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;users&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:string&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;timestamps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;type:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:utc_datetime_usec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Either way works. I personally tend to prefer using the &lt;code class=&quot;highlighter-rouge&quot;&gt;@timestamps_opts&lt;/code&gt; module attribute.&lt;/p&gt;

&lt;h3 id=&quot;ecto-3-types-for-timestamps-and-microseconds&quot;&gt;Ecto 3 types for timestamps and microseconds&lt;/h3&gt;

&lt;p&gt;Ecto 3 has a choice of four types to use for the &lt;code class=&quot;highlighter-rouge&quot;&gt;timestamps&lt;/code&gt; function: &lt;code class=&quot;highlighter-rouge&quot;&gt;:utc_datetime&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;:utc_datetime_usec&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;:naive_datetime&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;:naive_datetime_usec&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;They are equivalent to the following Elixir types:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Ecto 3 type&lt;/th&gt;
      &lt;th&gt;Elixir type&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Supports microseconds?&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Supports &lt;a href=&quot;https://hexdocs.pm/elixir/DateTime.html#to_unix/2&quot;&gt;DateTime functions?&lt;/a&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Supports NaiveDateTime functions?&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:utc_datetime_usec&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DateTime&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;✓&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;✓&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;✓&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:utc_datetime&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DateTime&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;✓&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;✓&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:naive_datetime_usec&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NaiveDateTime&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;✓&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;✓&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:naive_datetime&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NaiveDateTime&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;✓&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;migrations-and-microseconds&quot;&gt;Migrations and microseconds&lt;/h3&gt;

&lt;p&gt;If your Ecto project is currrently using &lt;code class=&quot;highlighter-rouge&quot;&gt;naive_datetime&lt;/code&gt; for timestamps and you switch to &lt;code class=&quot;highlighter-rouge&quot;&gt;utc_datetime&lt;/code&gt; in your schemas, you don’t have to do any changes to migrations for it to work. That being said here is some information about microsecond precision:&lt;/p&gt;

&lt;p&gt;I like to use &lt;code class=&quot;highlighter-rouge&quot;&gt;:utc_datetime_usec&lt;/code&gt; for the timestamps because it has microsecond precision instead of just whole seconds. In certain cases this can be useful. In order to have microsecond precision, make sure that the type created in the database table stores microseconds. This can be done by using &lt;code class=&quot;highlighter-rouge&quot;&gt;utc_datetime_usec&lt;/code&gt; in the migration.&lt;/p&gt;

&lt;p&gt;If you do not want to use microsecond precision, use &lt;code class=&quot;highlighter-rouge&quot;&gt;:utc_datetime&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;:utc_datetime_usec&lt;/code&gt; in your schemas and make sure that the migration for the timestamps match in terms of having “_usec” at the end or not.&lt;/p&gt;

&lt;p&gt;A peculiar detail is that in migrations, unlike schemas, “utc_datetime” and “naive_datetime” both do the same thing. It is “_usec” that matters in migrations. In Postgres the type is either &lt;code class=&quot;highlighter-rouge&quot;&gt;timestamp without time zone&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;timestamp(0) without time zone&lt;/code&gt;. The “(0)” part means that fractional seconds are not stored.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Ecto 3 migration type&lt;/th&gt;
      &lt;th&gt;Postgres type&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Stores microseconds?&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:utc_datetime_usec&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;timestamp without time zone&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;✓&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:naive_datetime_usec&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;timestamp without time zone&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;✓&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:utc_datetime&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;timestamp without time zone(0)&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:naive_datetime&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;timestamp without time zone(0)&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;As an aside - you might wonder why Ecto uses a Postgres type called “timestamp &lt;em&gt;without time zone&lt;/em&gt;” even though we know that the time zone is UTC, but that is a subject for another blog post. For the type in the postgres database, the thing that counts is whether there is a (0) at the end or not: &lt;code class=&quot;highlighter-rouge&quot;&gt;timestamp without time zone(0)&lt;/code&gt; for whole seconds and &lt;code class=&quot;highlighter-rouge&quot;&gt;timestamp without time zone&lt;/code&gt; for the Ecto types that end in &lt;code class=&quot;highlighter-rouge&quot;&gt;_usec&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To make sure the migrations have precision you want (usec or whole seconds), you can specify the type in the migrations when creating a table like so:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;YourAppNameHere&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Repo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Migrations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CreateUsers&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ecto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Migration&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;change&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:string&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;timestamps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;type:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:utc_datetime_usec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I like this approach because it is explicit and consistently works the same way regardsless of configuration. However an alternative to setting the type in the migration files is to use config. Putting the following in &lt;code class=&quot;highlighter-rouge&quot;&gt;config.exs&lt;/code&gt; will use microsecond precision when running the migrations even if the migration files do not specify this and just say &lt;code class=&quot;highlighter-rouge&quot;&gt;timestamps()&lt;/code&gt;:
&lt;code class=&quot;highlighter-rouge&quot;&gt;config :your_app_name_here, YourAppNameHere.Repo, migration_timestamps: [type: :utc_datetime_usec]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you have existing tables and you want to change the microsecond precision with an Ecto migration here is an example of a migration that does that. In this case using microsecond precision:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;YourAppNameHere&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Repo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Migrations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MakeTimestampsUsec&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ecto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Migration&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;change&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# For each of the listed tables, change the type of :inserted_at and :updated_at to microsecond precision&lt;/span&gt;
    &lt;span class=&quot;sx&quot;&gt;~w/users products another_table/&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_atom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;alter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;modify&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:inserted_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:utc_datetime_usec&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;modify&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:updated_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:utc_datetime_usec&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;ecto-2&quot;&gt;Ecto 2&lt;/h2&gt;
&lt;p&gt;&lt;a name=&quot;ecto2&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In Ecto 2 (starting from version 2.1) there are two datetime types instead of four. Microseconds have their own separate setting for timestamps: &lt;code class=&quot;highlighter-rouge&quot;&gt;usec&lt;/code&gt; which is a boolean. &lt;code class=&quot;highlighter-rouge&quot;&gt;[type: :utc_datetime, usec: true]&lt;/code&gt; in Ecto 2 is the equivalent of &lt;code class=&quot;highlighter-rouge&quot;&gt;[type: :utc_datetime_usec]&lt;/code&gt; in Ecto 3.&lt;/p&gt;

&lt;p&gt;As with Ecto 3 you can put a &lt;code class=&quot;highlighter-rouge&quot;&gt;@timestamps_opts&lt;/code&gt; everywhere &lt;code class=&quot;highlighter-rouge&quot;&gt;use Ecto.Schema&lt;/code&gt; is present:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@timestamps_opts [type: :utc_datetime, usec: true]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Make sure to set &lt;code class=&quot;highlighter-rouge&quot;&gt;usec&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; in depending on the type in the database.&lt;/p&gt;

&lt;h2 id=&quot;why&quot;&gt;Why&lt;/h2&gt;

&lt;p&gt;This text has covered &lt;em&gt;how&lt;/em&gt; to use UTC DateTimes for Ecto timestamps instead of NaiveDateTime. A later article will go more into &lt;em&gt;why&lt;/em&gt; this is a good idea. It is related to &lt;a href=&quot;/2019/01/08/data-types-assumptions.html&quot;&gt;“keeping the units around” in your data&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;P.S. At the end of August I will be speaking about Date, Time and Timezones in Elixir 1.9 at &lt;a href=&quot;https://elixirconf.com/2019&quot;&gt;ElixirConf US 2019&lt;/a&gt; in Colorado.&lt;/p&gt;
</description>
        <pubDate>Mon, 17 Jun 2019 05:00:00 -0700</pubDate>
        <link>http://www.creativedeletion.com/2019/06/17/utc-timestamps-in-ecto.html</link>
        <guid isPermaLink="true">http://www.creativedeletion.com/2019/06/17/utc-timestamps-in-ecto.html</guid>
        
        
      </item>
    
      <item>
        <title>Data types, assumptions and how a spacecraft crashed</title>
        <description>&lt;p&gt;In maths and physics classes in school I was taught to always keep track of the units when doing calculations. If you do some calculation and the result is just a number - that is not good enough. How fast is a train travelling? 80? 80 what? 80 bananas? If you keep track of the units you can do all kinds of calculations and have an easier time figuring out if it is 80 meters, 80 meters per second, 80 km/h, or 80 miles per hour. Throughout the calculations the units are always there. And at the end your result will include the unit.&lt;/p&gt;

&lt;p&gt;However in programming, developers are not always keeping track of units so rigorously. In this article I will go through some advantages of doing so.&lt;/p&gt;

&lt;h2 id=&quot;missing-and-assumed-information-versus-explicit-data&quot;&gt;Missing and assumed information versus explicit data&lt;/h2&gt;

&lt;p&gt;If you have “10.00 US Dollars” written down, both the number “10.00” and the “US Dollars” part are data. Data can be very useful to both computers and humans. If some data is deemed to be needed, but not present, humans or computer programs can make some assumptions or use some made up data based on a default or an algorithm. However if this made up data or assumption is incorrect, it can lead to problems.&lt;/p&gt;

&lt;p&gt;One way of representing a price of 10.00 US Dollars is simply using an integer or a decimal number:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;price: #Decimal&amp;lt;10.00&amp;gt;&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;The information about which currency the decimal represents is not present in the data itself. So you need to look at the context and look outside of the data present here to find out what currency it is.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A way to improve this a bit is to add the unit to the name of a database column or variable name. So instead of calling the column simply “price”, we can call it “price_usd”:
&lt;code class=&quot;highlighter-rouge&quot;&gt;price_usd: #Decimal&amp;lt;10.00&amp;gt;&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;This is better than nothing. But if that value is taken out of context and passed to a function as just a decimal number, the information about the currency is not there anymore.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Another way is to represent this with both the raw number value and a separate part representing the currency code:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;ss&quot;&gt;price_amount:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#Decimal&amp;lt;10.00&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;price_currency:&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;USD&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;To take it further we can have a type representing money:
&lt;code class=&quot;highlighter-rouge&quot;&gt;price: %Money{amount: #Decimal&amp;lt;10.00&amp;gt;, currency_code: USD}&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;This money-specific custom type can be used in a programming language in combination with the previous structure with two fields read from a database and put into the “Money” type struct. Compared to the first example of just having a decimal, in the code we now have a type that tells us both that it is money - not just any Decimal - and what currency it is.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;computer-checking-units-vs-assumptions-about-someone-having-read-something&quot;&gt;Computer checking units vs. assumptions about someone having read something&lt;/h2&gt;

&lt;p&gt;If all of the money amounts in a system is handled with such a money type, this can prevent certain problems. For instance if you try to add two amounts money and they have different currencies, this must be taken into account. Adding 10 USD and 10 EUR is easy to do if they are just simple numbers. The result is 20. But 20 what? It doesn’t make sense. With a type that includes the “unit” (in this case the currency), functions can include checks to prevent mixing currencies incorrectly or perhaps convert currencies before adding them together.&lt;/p&gt;

&lt;h2 id=&quot;getting-data-into-the-system&quot;&gt;Getting data into the system&lt;/h2&gt;

&lt;p&gt;Do not make up fake data based on loose assumptions. If you have a parsing function to parse strings and make them into Money structs don’t assume some default currency if a currency is missing. E.g. when parsing “$10.00 USD” it is fine to just make that into a Money struct with 10.00 USD. But if a string only contains “10.00” then the information about the currency is not present in the data. It might be tempting to have “default currency” and just have a general parsing function assume that if you see “10.00” then assume that it is USD. This is dangerous. Instead the parsing function should return an error and say that the currency code is missing. It is better to raise errors in the software than to get bad data into your system. An example of what not to do is how in Ruby the &lt;a href=&quot;https://stackoverflow.com/questions/33879855/why-does-23-dogs-get-parsed-to-23-november-2015-in-pry-but-3-dogs-gives-a-p&quot;&gt;Date.parse method will parse “23 dogs” as the 23rd of November 2018&lt;/a&gt;. Or whatever the current month and year is. (“3 dogs” results in an error though).&lt;/p&gt;

&lt;p&gt;Parsing should not make too many assumptions and add fake data if some data is missing. Like ignoring “dogs” and adding a year and month that was no where to be found in the string being “parsed”. In that case it is not just parsing. It is parsing and some complicated random data generation combined into one confusing method.&lt;/p&gt;

&lt;p&gt;In some cases you have data coming in that does not include all the information you want. Imagine a CSV file with amounts that represent dollar amounts. The people that gave you this data maybe told you in person or over the phone that the numbers represent USD amounts even if the USD currency code is nowhere to be found in the CSV file. It would be good if the currency code was present in the CSV file. However if it is not possible to convince the producer of the data to include the currency code, you can resort to adding the currency code just after parsing it.&lt;/p&gt;

&lt;p&gt;If a programmer knows that the string is in fact representing an amount of “USD” even though USD is not present in the data being parsed, the amount “10.00” can be parsed as a number. Then programmers can create a new Money struct with a combination of the parsed number and explicitly putting “USD” in there. This way the parsing function is simply parsing the data that is actually there (10.00). Then the information about the currency (USD) is separately and explicitly being defined in the code for that specific data source. So when someone is later reading the code, they can see that this assumption is there and that is where the currency part comes from, rather than from the parsed input.&lt;/p&gt;

&lt;p&gt;The important thing to be clear about is that if you have “10.00” going in and Money struct with “USD” going out at the other end, you are not just parsing data. You are parsing and also adding data about currency based on an assumption.&lt;/p&gt;

&lt;p&gt;I think that in general it is best if data is not silently created by default. A money amount parsing function that defaults to a certain currency (USD) might seem innocent enough. It can be convenient in some cases. But convenience in one situation can be silent creation of bad data in another situation.&lt;/p&gt;

&lt;h2 id=&quot;getting-data-out-of-the-system&quot;&gt;Getting data out of the system&lt;/h2&gt;

&lt;p&gt;Whether data is being passed around inside the boundaries of a system or to an entirely different system, keeping track of the units is useful in both cases. If the units are properly determined upon entry into the system and kept all along, they are right there and available for when they are to be exported out of the system or sent to other systems. For instance with a JSON HTTP API. So instead of an API having a field for a price containing just a decimal value, we can provide both the decimal &lt;em&gt;and&lt;/em&gt; the the currency together in the API. This means that other systems will also have this currency information. Just like we would want other people to provide this kind of information to our system, we can provide it to others. If we keep track of it.&lt;/p&gt;

&lt;h2 id=&quot;communication-across-systems&quot;&gt;Communication across systems&lt;/h2&gt;

&lt;p&gt;If everyone makes sure to keep track of units as soon as the data is either created in that system or read from another system that is a good start. Then if everyone also includes the units when providing data to other systems, this in turn makes it easier for those systems to get the units right as they go from one system to another.&lt;/p&gt;

&lt;h2 id=&quot;space-craft-destroyed-by-incorrect-assumption-of-unit&quot;&gt;Space craft destroyed by incorrect assumption of unit&lt;/h2&gt;

&lt;figure class=&quot;picture right_img&quot;&gt;
  &lt;img src=&quot;/assets/Mars_Climate_Orbiter_2.jpg&quot; /&gt;
  &lt;figcaption&gt;Mars Climate Orbiter&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The Mars Climate Orbiter was launched into space in 1998. In September 1999 before the mission was completed the spacecraft burned up in the atmosphere of Mars.&lt;/p&gt;

&lt;p&gt;Later, many people have used this failure as an example of not following sound engineering practices and suggested different solutions and how those solutions could have prevent failure. I am not the first one to sit in an armchair and write about how it could have been done differently. But I will still use this as an example because it seems like a fun example to use. &lt;a href=&quot;https://www.creativedeletion.com/2016/11/12/elixirconf-2016-date-time.html&quot;&gt;I used the same example for a talk in 2016&lt;/a&gt; where I briefly touched on the same subject about being explicit about data.&lt;/p&gt;

&lt;p&gt;The reason that the space craft burned up was that one part of the system was receiving numbers representing Newton seconds, but using them as if they were pound-force seconds.
Imagine that you have an API that provides information. Instead of simply using an integer or a float, the API could include a unit.&lt;/p&gt;

&lt;p&gt;Imagine that the consumer of the API was expecting a value in pound-force seconds tagged with a unit. So instead of just sending a decimal such as “2.345” it would send “2.345 N s”.
And the consumer of the API would read and verify the unit. On the consumer side it would receive the unit as “N s”. And verify that it is pounds as expected… Hold on a minute. “N s” is not pounds. The software on the consumer side would raise an error because “N s” would not match the expected unit. This error would be seen in tests before sending the system into production. Perhaps this would prevent the mission from failure. Keeping the units around allows software to be written in assertive way to make sure that the right units are sent to it.&lt;/p&gt;

&lt;h2 id=&quot;using-incorrect-units&quot;&gt;Using incorrect units&lt;/h2&gt;

&lt;p&gt;A unit is information. And wrong information is worse than a lack of information. Using wrong units is worse than not using any units. For instance representing 10 meters as 10 feet is worse than just using the integer 10. A cake recipe that specifies 1kg of salt instead of 1 teaspoon of salt is worse than just specifying “salt to taste”. Have you ever tasted a cake made with too much salt? I once stored both salt and sugar in unlabelled containers and used salt instead of sugar. Let’s just say that I would not recommend doing that.&lt;/p&gt;

&lt;h2 id=&quot;other-kinds-of-units&quot;&gt;Other kinds of units&lt;/h2&gt;

&lt;p&gt;Besides currency codes, these principles apply to other “units” including: lengths, temperatures, weights, timezone identifiers and time zone offsets in combinations with datetimes, and more.&lt;/p&gt;

&lt;h2 id=&quot;communication-and-applications-interfaces&quot;&gt;Communication and applications interfaces&lt;/h2&gt;

&lt;p&gt;Writing computer programs involves both communicating with humans and computers. The source code should be readable by current programmers, future programmers and at the same being understood by computers. Data is not different from source code in that regard. A human can read some data and make better decisions and use of the data if it is correct and sufficient. The same goes for computer systems.&lt;/p&gt;

&lt;p&gt;Having good data can be useful to both programmers and computer systems. It could be the programmer that reads the code a month after writing it. Or other programmers that read it later. It could be a function in a library that can make use of the data. Or it can be code in other systems that read the data produced by your system. Be it preventing a baker from adding too much salt, a space craft from burning or helping a programmer more easily reading code and adding features to it.&lt;/p&gt;

&lt;p&gt;P.S. In a future post I will expand on these ideas and how it relates to the date and time types in &lt;a href=&quot;https://www.elixir-lang.org/&quot;&gt;Elixir&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Tue, 08 Jan 2019 04:00:00 -0800</pubDate>
        <link>http://www.creativedeletion.com/2019/01/08/data-types-assumptions.html</link>
        <guid isPermaLink="true">http://www.creativedeletion.com/2019/01/08/data-types-assumptions.html</guid>
        
        
      </item>
    
      <item>
        <title>Reasons for using Elixir instead of cron</title>
        <description>&lt;p&gt;Why use multiple lines of &lt;a href=&quot;https://elixir-lang.org&quot;&gt;Elixir&lt;/a&gt; instead of a single line of &lt;a href=&quot;https://en.wikipedia.org/wiki/Cron&quot;&gt;cron&lt;/a&gt;? Cron has been a staple in the toolbox for developers making web applications. But with Elixir (or other languages based on the Erlang virtual machine) it is not as necessary anymore.&lt;/p&gt;

&lt;p&gt;Using Elixir over cron has some advantages, including:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If your application runs, your scheduled job will run. The supervisor takes care of this.&lt;/li&gt;
  &lt;li&gt;If there are errors, they will be reported to the same place as other errors from your app.&lt;/li&gt;
  &lt;li&gt;One less runtime dependency - you don’t need cron.&lt;/li&gt;
  &lt;li&gt;The source code that schedules the job to run is in the same language and codebase as the rest of the app.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;before-elixir&quot;&gt;Before Elixir&lt;/h1&gt;

&lt;figure class=&quot;picture right_img&quot;&gt;
  &lt;img src=&quot;/assets/greenwich_clock.jpg&quot; srcset=&quot;/assets/greenwich_clock.jpg 1x, /assets/greenwich_clock2x.jpg 2x&quot; /&gt;
  &lt;figcaption&gt;Gratuitous photo of an old clock in Greenwich.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Imagine that it is the year 2000 and you are developing a web application using PHP. You want to periodically run a command to delete some temporary files from a directory. PHP application code is usually run when someone goes to their browser and clicks a link to you web site. However you do not want to run that command every time someone clicks a link to you website. So you decide to use cron. Just a single line of slightly cryptic code will make cron execute a command of your choosing. You manually add the cron entry to the server and verify that it works.&lt;/p&gt;

&lt;p&gt;Then a year later you move the application to a new server. You make sure that PHP is there and that it has access to a MySQL server. Everything seems to be working fine. Shortly after you stop working on that application and new developers take over. They notice that server is starting to run out of space. A directory with files is growing and growing in size. They are not sure if the files can be deleted or not. Oops. When moving to the new server you forgot to add the cron job to the new server. However there were no warnings. And the PHP source code did not have any code that deleted the files.&lt;/p&gt;

&lt;p&gt;The single line added to the crontab was a piece of the system. But because it manually added on a server and not added to the PHP source code, it was not part of the documented history of the system.&lt;/p&gt;

&lt;p&gt;Of course instead of manually adding the cron tab, you can add the cron job to provisioning and deployment scripts which are tied to the application. The provisioning script would install things necessary for the cron job. Suddenly it is not just a single line of crontab entry that is necessary. Now it is that line, plus making sure that cron is present, plus code to update the crontab when there are changes.&lt;/p&gt;

&lt;h1 id=&quot;a-new-solution&quot;&gt;A new solution&lt;/h1&gt;

&lt;p&gt;Fast forward to 2018. You are making a web app again. This time using Elixir. Again you need to periodically execute a command to delete temporary files. Instead of using cron, you use Elixir. With Elixir it is easy to add extra processes that can run code when you want. A &lt;a href=&quot;https://stackoverflow.com/questions/32085258/how-can-i-schedule-code-to-run-every-few-hours-in-elixir-or-phoenix-framework/38778117&quot;&gt;very simple GenServer&lt;/a&gt; is all it takes to periodically run a command. If you prefer, there are libraries such as &lt;a href=&quot;https://github.com/quantum-elixir/quantum-core&quot;&gt;Quantum&lt;/a&gt; or &lt;a href=&quot;https://github.com/SchedEx/SchedEx&quot;&gt;SchedEx&lt;/a&gt;, that use the same kind of syntax as cron.&lt;/p&gt;

&lt;p&gt;A single line of code can add it to the supervision tree of the application. This means that when the application runs - the code is executed. If something goes wrong, there are error messages. The code to schedule is no longer outside the code base. It no longer logs errors to a different place. It no longer requires cron to be available at runtime and the cron job to be set up and configured.&lt;/p&gt;

&lt;p&gt;As with other uses of supervised processes in Elixir, you can trust that if the application is up, then the code is executed. If anything goes wrong there are errors that can be monitored in the same way as other errors in the system.&lt;/p&gt;

&lt;h1 id=&quot;comparing-apples-to-oranges&quot;&gt;Comparing apples to oranges&lt;/h1&gt;

&lt;p&gt;What at first seems like “just one line in the crontab” is not the equivalent of adding a line to the Elixir source code. If provisioning is not already there for setting up the crontab and maintaining changes, that has to be added. This is just in order to make sure that the cron jobs are available and up to date.&lt;/p&gt;

&lt;p&gt;When looking at the system as a whole the cron jobs are a part of what is necessary. If you already have procedures for developing, versioning and deploying code, you probably want the same for cron jobs. Going from not using cron to using cron is more than just manually logging on to a production server and running &lt;code class=&quot;highlighter-rouge&quot;&gt;crontab -e&lt;/code&gt; if you want to have the same maintanability, version history and deployment process as your existing code.&lt;/p&gt;

&lt;h1 id=&quot;new-possibilities&quot;&gt;New possibilities&lt;/h1&gt;

&lt;p&gt;Languages running on the BEAM (Erlang, &lt;a href=&quot;https://elixir-lang.org&quot;&gt;Elixir&lt;/a&gt;, LFE etc.) add new possibilities compared to less concurrent languages that many developers have been using before. Suddenly things that required a dependency can now be done in the language itself. In fact in some cases, such as RabbitMQ, those dependencies were written in Erlang to begin with.&lt;/p&gt;

&lt;p&gt;This means possibilities to reduce dependencies, simplify development, deployment, provisioning and monitoring.&lt;/p&gt;
</description>
        <pubDate>Tue, 04 Sep 2018 05:00:00 -0700</pubDate>
        <link>http://www.creativedeletion.com/2018/09/04/using-elixir-instead-of-cron.html</link>
        <guid isPermaLink="true">http://www.creativedeletion.com/2018/09/04/using-elixir-instead-of-cron.html</guid>
        
        
      </item>
    
      <item>
        <title>ElixirConf 2016 talk in Orlando (video): The New Calendar Types in Elixir 1.3</title>
        <description>&lt;p&gt;Elixir &amp;amp; Phoenix Conf 2016 took place in Orlando, Florida in September. I gave a talk about the new date and time types in Elixir 1.3. It was recorded and the video is available:&lt;/p&gt;

&lt;iframe width=&quot;720&quot; height=&quot;405&quot; src=&quot;https://www.youtube.com/embed/3gky54_qLjQ&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/lau/the-new-calendar-types-in-elixir-1-dot-3&quot;&gt;The slides are available here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If this subject interests you, also check out &lt;a href=&quot;/2015/10/19/elixirconf-talk-date-time.html&quot;&gt;my talk from ElixirConf 2015&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Sat, 12 Nov 2016 04:00:00 -0800</pubDate>
        <link>http://www.creativedeletion.com/2016/11/12/elixirconf-2016-date-time.html</link>
        <guid isPermaLink="true">http://www.creativedeletion.com/2016/11/12/elixirconf-2016-date-time.html</guid>
        
        
      </item>
    
      <item>
        <title>What everyone except programmers knows about dates</title>
        <description>&lt;p&gt;Ask a schoolchild to write down a date. They will likely write a month, day of the month and maybe a year too (not necessarily in that order). So will most
other literate people at any age.&lt;/p&gt;

&lt;p&gt;Ask a programmer to write a date and they might write not just a date, but also add hours, minutes and seconds to it!&lt;/p&gt;

&lt;p&gt;But &lt;b&gt;a date does not have hours, minutes and seconds&lt;/b&gt;. Most people know this. Except many programmers. Well
they probably know, but many use the word &lt;em&gt;date&lt;/em&gt; to mean a combination of date and point of time in hours and minutes (and more detailed than that).&lt;/p&gt;

&lt;h2 id=&quot;why-it-is-like-this&quot;&gt;Why it is like this&lt;/h2&gt;

&lt;p&gt;Certain systems and programming languages have a simplistic structure to handle all kinds of time and date:
&lt;a href=&quot;http://www.creativedeletion.com/2016/02/04/timetypes_prevent_bugs.html&quot;&gt;One type to rule them all&lt;/a&gt;.
This is a bad idea, but it is very prevalent. For instance typing &lt;code class=&quot;highlighter-rouge&quot;&gt;date&lt;/code&gt; in Linux gives you not just a date,
but also the time of day. In Java (before version 8) and Javascript the &lt;code class=&quot;highlighter-rouge&quot;&gt;Date&lt;/code&gt; structure is really a datetime with certain
timezone related information added on.&lt;/p&gt;

&lt;h2 id=&quot;hijacking&quot;&gt;Hijacking&lt;/h2&gt;

&lt;p&gt;Handling date and time in a computer context has enough challenges by itself: uneven months, leap years, time zones,
DST, updates to time zones and so on. Hijacking and changing the meaning of the word “date” does not help.&lt;/p&gt;

&lt;p&gt;Because if “date” in certain contexts implicitly means “datetime - maybe with a specified offset from UTC”, what word
do you use to describe a simple date?&lt;/p&gt;

&lt;h2 id=&quot;those-that-do-it-better&quot;&gt;Those that do it better&lt;/h2&gt;

&lt;p&gt;SQL databases have their share of problems when it comes to handling date and time. Especially when it comes to
time zones. But at least MySQL has pretty good names for these three types:&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;DATE&lt;/td&gt;
      &lt;td&gt;year, month, day&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;TIME&lt;/td&gt;
      &lt;td&gt;hour, minute, second&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DATETIME&lt;/td&gt;
      &lt;td&gt;year, month, date, hour, minute, second&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color: #666&quot;&gt;(Note: this is not a recommendation of MySQL.)&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-to-solve-this-problem&quot;&gt;How to solve this problem&lt;/h2&gt;

&lt;p&gt;This issue is just one of many issues with date and time in a software context.
But nonetheless I think it is important. And why not tackle each of the issues one step at the time?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Be concious of the difference between what a date is in the real world and the badly named
structures used in certain languages and libraries.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Remember a date has no hours, minutes or seconds.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you want to talk about a datetime, call it a datetime not a date.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you are using a language with a &lt;code class=&quot;highlighter-rouge&quot;&gt;Date&lt;/code&gt; class, that is really a datetime, some times you need to talk about the Date class. In that case be explicit about calling it e.g. a “Java Date object” and not just a “date”.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It is hard to change existing languages and libraries, but if you design a new programming language or date/time
related library please call the concepts by their right name. A date is a just a date.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you talk to someone involved in a software project and they call a datetime a “date”, make it clear what you are talking about.
Maybe even send them a link to this blog post so that you are all on the same page.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 29 Apr 2016 05:00:00 -0700</pubDate>
        <link>http://www.creativedeletion.com/2016/04/29/programmers-know-dates.html</link>
        <guid isPermaLink="true">http://www.creativedeletion.com/2016/04/29/programmers-know-dates.html</guid>
        
        
      </item>
    
      <item>
        <title>Compare date and time in Elixir with protocols</title>
        <description>&lt;p&gt;The &lt;a href=&quot;https://github.com/lau/calendar&quot;&gt;Calendar&lt;/a&gt; library has functionality for comparing dates and datetimes.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;Calendar.Date&lt;/code&gt; module has a function for getting the difference
between two dates. You can for instance pass date tuples
or Calendar structs to the &lt;code class=&quot;highlighter-rouge&quot;&gt;Calendar.Date.diff/2&lt;/code&gt; funciton. This will return the difference in days
between the two dates.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;m&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;day:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;month:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;year:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;m&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/elixir-lang/ecto&quot;&gt;Ecto&lt;/a&gt; is another library that has structs for dates and datetimes.&lt;/p&gt;

&lt;p&gt;To get an Ecto date struct you can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;Ecto.Date.from_erl&lt;/code&gt; function like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ecto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_erl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#Ecto.Date&amp;lt;2016-03-10&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What if you could use the same function in the calendar library to compare
&lt;code class=&quot;highlighter-rouge&quot;&gt;Ecto.Date&lt;/code&gt; structs? You can!&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/lau/calecto&quot;&gt;Calecto&lt;/a&gt; library contains a protocol implementation that makes this possible.
It looks like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;k&quot;&gt;defimpl&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ContainsDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;for:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ecto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date_struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_erl!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This means that if you have added Calecto to your Elixir project, you can pass Ecto.Date structs to
the same function:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ecto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_erl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;m&quot;&gt;6&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In the above example an Ecto.Date struct is compared to a tuple.
Whatever implements the &lt;code class=&quot;highlighter-rouge&quot;&gt;ContainsDate&lt;/code&gt; protocol can be used as parameters.&lt;/p&gt;

&lt;p&gt;We can also compare two Ecto.Date structs:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ecto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_erl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Ecto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_erl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt;
&lt;span class=&quot;m&quot;&gt;38&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;all-the-other-functions&quot;&gt;All the other functions&lt;/h2&gt;

&lt;p&gt;But that is not all. &lt;code class=&quot;highlighter-rouge&quot;&gt;diff/2&lt;/code&gt; is just one of the functions in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Calendar.Date&lt;/code&gt; module.
Any place where a date is expected you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;Ecto.Date&lt;/code&gt; structs, &lt;code class=&quot;highlighter-rouge&quot;&gt;Calendar.Date&lt;/code&gt; structs
or tuples as you please. In addition to that you can implement the &lt;code class=&quot;highlighter-rouge&quot;&gt;Calendar.ContainsDate&lt;/code&gt; for your own custom
date types.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# what day of the week it is:&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ecto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_erl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;day_of_week_name&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Thursday&quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# ISO 8601 basic format&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ecto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_erl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iso8601_basic&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;20160310&quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Format as ordinal date&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Ecto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_erl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ordinal&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;2016-070&quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Is it on a tuesday?&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ecto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_erl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tuesday?&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Get an infinite Stream of all Dates after the Ecto.Date&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ecto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_erl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;days_after&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#Function&amp;lt;32.16851754/2 in Stream.unfold/2&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Add 10 days to the Date&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ecto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_erl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;day:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;month:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;year:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Subtract a day&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ecto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_erl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subtract!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;day:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;month:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;year:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Format with strftime&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ecto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_erl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Strftime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strftime!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;The year is %Y&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;The year is 2016&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Those are just a few examples of the available functionality.&lt;/p&gt;

&lt;h2 id=&quot;comparing-ectodatetime-structs&quot;&gt;Comparing Ecto.DateTime structs&lt;/h2&gt;

&lt;p&gt;Because &lt;code class=&quot;highlighter-rouge&quot;&gt;Ecto.DateTime&lt;/code&gt; structs have datetimes, but no timezone information
they are equivalent to Calendars &lt;code class=&quot;highlighter-rouge&quot;&gt;NaiveDateTime&lt;/code&gt; structs.&lt;/p&gt;

&lt;p&gt;Like &lt;code class=&quot;highlighter-rouge&quot;&gt;Calendar.Date&lt;/code&gt; functions take arguments that implement the &lt;code class=&quot;highlighter-rouge&quot;&gt;Calendar.ContainsDate&lt;/code&gt;
protocol, &lt;code class=&quot;highlighter-rouge&quot;&gt;Calendar.NaiveDateTime&lt;/code&gt; functions take arguments that implement the
&lt;code class=&quot;highlighter-rouge&quot;&gt;Calendar.ContainsNaiveDateTime&lt;/code&gt; protocol. Out of the box Calendar has implemented
these protocols for &lt;code class=&quot;highlighter-rouge&quot;&gt;Calendar.NaiveDateTime&lt;/code&gt; structs and erlang style tuples.&lt;/p&gt;

&lt;p&gt;Calecto implements the protocol for &lt;code class=&quot;highlighter-rouge&quot;&gt;Ecto.DateTime&lt;/code&gt; structs.
This means we can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;Calendar.NaiveDateTime.diff/2&lt;/code&gt; function to compare
&lt;code class=&quot;highlighter-rouge&quot;&gt;Ecto.DateTime&lt;/code&gt; structs too.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ecto_dt1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ecto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_erl&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#Ecto.DateTime&amp;lt;2016-01-01 00:00:00&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ecto_dt2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ecto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_erl&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#Ecto.DateTime&amp;lt;2016-01-01 00:10:03&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;NaiveDateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ecto_dt1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ecto_dt2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;603&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:before&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The difference between the two structs is 603 seconds and 0 microseconds.
You can pattern match on the fourth tuple element to get &lt;code class=&quot;highlighter-rouge&quot;&gt;:before&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;:after&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;:same_time&lt;/code&gt;.
Alternatively if you do not want to know how big the difference is, but just want
to know if the first datetime is before the second one or not, there is a function for that:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;NaiveDateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;before?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ecto_dt1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ecto_dt2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ecto_dt1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;NaiveDateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;after?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ecto_dt2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And as with the &lt;code class=&quot;highlighter-rouge&quot;&gt;Date&lt;/code&gt; module you can also use &lt;code class=&quot;highlighter-rouge&quot;&gt;Ecto.DateTime&lt;/code&gt;s in the other functions
in the &lt;code class=&quot;highlighter-rouge&quot;&gt;NaiveDateTime&lt;/code&gt; module:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Add 10 seconds&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ecto_dt1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;NaiveDateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;NaiveDateTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;day:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;hour:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;min:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;month:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;sec:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;usec:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;year:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Subtract 3600 seconds&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ecto_dt1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;NaiveDateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subtract!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3600&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;NaiveDateTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;day:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;hour:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;min:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;month:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;sec:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;usec:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;year:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2015&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Format as ISO 8601 basic&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ecto_dt1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;NaiveDateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iso8601_basic&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;20160101T000000&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;comparing-just-the-date-part-of-a-datetime&quot;&gt;Comparing just the date part of a datetime&lt;/h2&gt;

&lt;p&gt;Because &lt;code class=&quot;highlighter-rouge&quot;&gt;Ecto.Datetime&lt;/code&gt; contains a date - the
&lt;code class=&quot;highlighter-rouge&quot;&gt;ContainsDate&lt;/code&gt; protocol is also implemented for &lt;code class=&quot;highlighter-rouge&quot;&gt;Ecto.Datetime&lt;/code&gt;. As with a simple date we can also use
the functions in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Calendar.Date&lt;/code&gt; module with an &lt;code class=&quot;highlighter-rouge&quot;&gt;Ecto.DateTime&lt;/code&gt; as an argument.&lt;/p&gt;

&lt;p&gt;What if you have two datetimes and you want to know if they are on the same date - not
if they are on the exact same time, just if they are on the same date. There is not a special
function for that made for date-times. Instead we can simply use the same function as before:
&lt;code class=&quot;highlighter-rouge&quot;&gt;Date.diff/2&lt;/code&gt;. When passing datetimes, the protocols simply discards the time and just
uses the date part of the date-time:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ecto_dt1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ecto_dt2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;same_date?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ecto_dt1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ecto_dt2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ecto_dt1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;day_of_week_name&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Friday&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ecto_dt1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;week_number&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2015&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;53&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;how-to-get-all-of-this-goodness&quot;&gt;How to get all of this goodness&lt;/h2&gt;

&lt;p&gt;Just add &lt;a href=&quot;https://github.com/lau/calendar&quot;&gt;Calendar&lt;/a&gt; (and &lt;a href=&quot;https://github.com/lau/calecto&quot;&gt;Calecto&lt;/a&gt; if you use Ecto) to your mix file. Then you can start using the features
of Calendar without changing anything else in your existing code.&lt;/p&gt;

&lt;h2 id=&quot;the-whole-way&quot;&gt;The whole way&lt;/h2&gt;

&lt;p&gt;So far we have seen how the protocols effortlessly allow using date and time types
from Ecto with Calendar modules.&lt;/p&gt;

&lt;p&gt;If you go a bit further and use Calecto types e.g.
&lt;code class=&quot;highlighter-rouge&quot;&gt;Calecto.DateTimeUTC&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;Ecto.DateTime&lt;/code&gt;, you get more functionality,
&lt;a href=&quot;http://www.creativedeletion.com/2016/02/04/timetypes_prevent_bugs.html&quot;&gt;convenience&lt;/a&gt; and &lt;a href=&quot;http://www.creativedeletion.com/2015/03/19/persisting_future_datetimes.html&quot;&gt;protection from bugs&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;protocols&quot;&gt;Protocols&lt;/h2&gt;

&lt;p&gt;With Elixir protocols it is possible to build functionality once in one library and then use it
with data from other libraries without changing a single line of code in either!
All you have to do is implement the necessary protocols. In this example those libraries
are Calendar and Ecto. And Calecto provides the protocol implementation.&lt;/p&gt;

&lt;p&gt;Even within one library the protocols provide a clean way of making one function usable
with different data-types.&lt;/p&gt;

</description>
        <pubDate>Mon, 07 Mar 2016 04:00:00 -0800</pubDate>
        <link>http://www.creativedeletion.com/2016/03/07/comparing_dates_in_elixir.html</link>
        <guid isPermaLink="true">http://www.creativedeletion.com/2016/03/07/comparing_dates_in_elixir.html</guid>
        
        
      </item>
    
      <item>
        <title>How more time types prevent bugs and add clarity</title>
        <description>&lt;p&gt;Using a single type to represent dates, times, datetimes with and without
timezones can be confusing for developers. It makes the code less clear and
harder to understand.&lt;/p&gt;

&lt;p&gt;Furthermore, functions to do operations on these time representations, cannot
know what information is fake, generated data versus meaningful data.
This means that the functionality can be limited and have a higher risk of
being incorrect.&lt;/p&gt;

&lt;p&gt;On the other hand having more types that match the real life concepts, make it easier
for both programmers to model and understand the programs. At the same
time making it easier for the libraries to help programmers.&lt;/p&gt;

&lt;h2 id=&quot;types-in-databases&quot;&gt;Types in databases&lt;/h2&gt;

&lt;p&gt;In common databases, there are some types for dates that make a good deal of sense.
You have &lt;code class=&quot;highlighter-rouge&quot;&gt;time&lt;/code&gt; e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;10:15:58&lt;/code&gt;. That is all the information
the time has. You have a &lt;code class=&quot;highlighter-rouge&quot;&gt;date&lt;/code&gt; e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;2016-01-17&lt;/code&gt;. And then you have &lt;code class=&quot;highlighter-rouge&quot;&gt;datetime&lt;/code&gt;s, which is…
surprise: a date and a time. E.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;2016-01-17 10:15:58&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So far so good. Then there is the JavaScript way of handling time and date.
In JavaScript there is just one type. It is called &lt;code class=&quot;highlighter-rouge&quot;&gt;Date&lt;/code&gt;.
Now you might think that a JavaScript Date would represent, well, a date.
But actually in JavaScript a Date is a datetime. And it throws in some timezone
information for good measure. So a &lt;code class=&quot;highlighter-rouge&quot;&gt;Date&lt;/code&gt; is not a date. Think about that for a second.&lt;/p&gt;

&lt;p&gt;But the confusing naming is not the biggest problem. The problem is that
programmers are encuraged to use this one-size-fits-all type to store not just
datetimes with timezones. Also for datetimes without timezones, dates without
time and timezone and time without dates and timezones.&lt;/p&gt;

&lt;h2 id=&quot;understanding-the-data-in-a-program&quot;&gt;Understanding the data in a program&lt;/h2&gt;

&lt;p&gt;When a programmer reads code, it should not be unnecessarily hard to understand
what is going on.&lt;/p&gt;

&lt;p&gt;Imagine that you want to keep track of the date when people were born.
We get a date as a string in ISO format.
This data will be saved in a database.
You use JavaScript’s Date.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2016-1-17&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Sun&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Jan&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2016&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GMT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0100&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This gets you not just a Date, but a certain millisecond in time. Midnight at that
date. And it adds a timezone too.&lt;/p&gt;

&lt;p&gt;But what if the intention was to store just the date, and not the time of day (00:00:00.000)?
What if you store that information in the database. How do you know if that is supposed
to represent midnight at that date, or just the date? What about the timezone offset?
Was that intended by the programmer or is it just something added as by JavaScript?&lt;/p&gt;

&lt;p&gt;Do you manually look at a sample of the data and decide that the ones you looked
at were at midnight, and then decided that the time part is probably just something
that was added automatically by the JavaScript Date functionality?&lt;/p&gt;

&lt;p&gt;The programmer that comes back to read their own code or someone elses code
does not know if the data is supposed to be a datetime within a certain timezone
or if either of these parts were just added as fake “filler” by Javscript’s &lt;code class=&quot;highlighter-rouge&quot;&gt;Date&lt;/code&gt;:
the date, the time of day, the timezone.&lt;/p&gt;

&lt;p&gt;Looking at the type and the data, it looks like it is a datetime, even though
the programmer just needs to represent a simple date.&lt;/p&gt;

&lt;h2 id=&quot;the-libraries-understanding-of-what-it-is-supposed-to-mean&quot;&gt;The libraries’ understanding of what it is supposed to mean&lt;/h2&gt;

&lt;p&gt;The programmer is not the only one who is limited by the one-size-fits-all Date(time).
Imagine having to represent the date as a string. You might use a library that can
format the JavaScript “Date”. Since the Date has both a datetime and timezone, it
could print an RFC3339 string like so:
&lt;code class=&quot;highlighter-rouge&quot;&gt;2016-01-16T23:00:00Z&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In this case the function prints the datetime in RFC3339 as UTC. But hold on, the
date is now the 16th of January instead of the 17th! All we originally wanted to
store was the 17th of January 2016, but the type also includes time and a timezone.
Because of the timezone, that same time in UTC is the day before at 11pm.&lt;/p&gt;

&lt;p&gt;If we had a type available representing a simple date (year, month, day), and had
used that, the library could be designed to refuse to print an RFC3339 string on
the basis that it needs to know the time and timezone.&lt;/p&gt;

&lt;p&gt;By using a type that includes extra, fake, filler data
(the time of day and timezone), we open ourselves up for
bugs. Like with security, where there are &lt;a href=&quot;https://en.wikipedia.org/wiki/Attack_surface&quot;&gt;attack surfaces&lt;/a&gt;,
the extra data becomes a “bug surface”.&lt;/p&gt;

&lt;h2 id=&quot;making-the-intention-clear&quot;&gt;Making the intention clear&lt;/h2&gt;

&lt;p&gt;The types are like a vocabulary, and by limiting programmers to just one word for
date, time, datetime with timezone, datetime without timezone, it is harder
to communicate clearly.&lt;/p&gt;

&lt;h2 id=&quot;alternatives&quot;&gt;Alternatives&lt;/h2&gt;

&lt;p&gt;In Java (not JavaScript), the built in type was also called &lt;code class=&quot;highlighter-rouge&quot;&gt;Date&lt;/code&gt;.
But for a lot of people, that built in library was not suitable. An
alternavy library was made: &lt;a href=&quot;http://www.joda.org/joda-time/&quot;&gt;Joda Time&lt;/a&gt;.
This became the defacto standard library for date and time in Java.&lt;/p&gt;

&lt;p&gt;Joda Time has a seperate type to store just a date without time and a separate type
for just a time without a date and so on. Here are some of the key types:
&lt;code class=&quot;highlighter-rouge&quot;&gt;LocalDate, LocalTime, Instant, DateTime, DateTimeZone&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-elixir-calendar-handles-it&quot;&gt;How Elixir Calendar handles it&lt;/h2&gt;

&lt;p&gt;Another example is the &lt;a href=&quot;https://github.com/lau/calendar&quot;&gt;Calendar library&lt;/a&gt; for &lt;a href=&quot;http://www.elixir-lang.org/&quot;&gt;Elixir&lt;/a&gt;. Like Joda Time it does not have the one-size-fits-all Date type
that JavaScript does. Instead it has seperate types for a &lt;code class=&quot;highlighter-rouge&quot;&gt;DateTime&lt;/code&gt; in a specific timezone
at a specific point in time, for a &lt;code class=&quot;highlighter-rouge&quot;&gt;NaiveDateTime&lt;/code&gt; for just a date and a time
without a timezone, for just a &lt;code class=&quot;highlighter-rouge&quot;&gt;Time&lt;/code&gt; (e.g. 15:25:16),
and finally for a &lt;code class=&quot;highlighter-rouge&quot;&gt;Date&lt;/code&gt; (e.g. 2016-01-20).&lt;/p&gt;

&lt;p&gt;In Calendar there is a function to to format a datetime into an &lt;a href=&quot;http://tools.ietf.org/html/rfc3339#page-10&quot;&gt;RFC 3339&lt;/a&gt; string.
The RFC 3339 string needs to contain a datetime and a timezone offset.
A unix timestamp contains all of that. So we can parse a unix timestamp number,
and then pass the datetime on to a function that formats that.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;1453303516&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Parse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unix!&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rfc3339&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;2016-01-20T15:25:16Z&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you have a date you can parse that as a Date:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;2016-01-16&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Parse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iso8601!&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;day:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;month:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;year:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That simply gets you a date. What if we try to format that as an RFC3339 string?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;2016-01-16&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Parse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iso8601!&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rfc3339&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Protocol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;UndefinedError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ContainsDateTime&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;implemented&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;day:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;month:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;year:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We get an error, and that is great! The DateTime.Format.rfc3339 function does not
have enough information to generate an RFC3339 string so it raises an error. To
generate an RFC3339 string you need to know the date, time and UTC offset. In this
case we only had a date, so the time and UTC offset were missing.&lt;/p&gt;

&lt;h2 id=&quot;ecto-datetimes&quot;&gt;Ecto datetimes&lt;/h2&gt;

&lt;p&gt;In Ecto, an Elixir database wrapper, there are types for dates, times and datetimes.
The datetime type does not contain any data telling anything about which timezone
the datetime is in. (This is what is called a “naive” datetime in Calendar.)&lt;/p&gt;

&lt;p&gt;Ecto also has an automatic timestamps feature that add timestamps in UTC
when a record is updated or inserted. The type used for &lt;code class=&quot;highlighter-rouge&quot;&gt;inserted_at&lt;/code&gt; is the same
as any other datetime fields though. This means that for any given datetime
we do not know which timezone it belongs to.&lt;/p&gt;

&lt;p&gt;So even though the programmer can read documentation and find out that inserted_at
and updated_at timestamps are UTC, the date returned does not contain this information.&lt;/p&gt;

&lt;p&gt;There is a function for string representations of Ecto.DateTime structs as
ISO 8601. ISO 8601 datetimes allows describing the timezone. Ideally for the timestamps
&lt;code class=&quot;highlighter-rouge&quot;&gt;inserted_at&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;updated_at&lt;/code&gt;, there would be a function that format them as ISO8601 strings
and add a Z to convey that the datetimes are in UTC. But because the type is
also representing other datetimes where the timezone is unknown, we cannot
know which datetimes are inserted_at timestamps in UTC and which are not.&lt;/p&gt;

&lt;p&gt;So the only reasonable default is to opt for not saying anything about the timezone.&lt;/p&gt;

&lt;h2 id=&quot;calecto&quot;&gt;Calecto&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/lau/calecto&quot;&gt;Calecto&lt;/a&gt; is a Calendar-Ecto adapter. It knows that &lt;code class=&quot;highlighter-rouge&quot;&gt;inserted_at/updated_at&lt;/code&gt; timestamps set in Ecto 
are in UTC.
At the same time Calecto can make use of the various types in Calendar. So when using
Calecto the inserted_at field will be a &lt;code class=&quot;highlighter-rouge&quot;&gt;Calendar.DateTime&lt;/code&gt; struct that contains the information
that the timezone is in UTC. This means that we can use a formatting function 
to get a RFC3339 (which is an ISO 8601 profile) that contains the Z telling the world that this
datetime is in UTC.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inserted_at&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rfc3339&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;2016-01-20T15:25:16Z&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;On the other hand if we use a normal Ecto.DateTime type or a Calecto.NaiveDateTime
type for our field, we are saying that we do not know which timezone that
datetime is in. Therefore if we tried to use the same formatting function as above,
there would be an error message saying that we cannot create an RFC3339 string
without knowing the timezone.&lt;/p&gt;

&lt;p&gt;There is a way to overcome that though. If for some reason you have a datetime without
timezone information and know that it is in UTC, you can promote a naive datetime
to a DateTime:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;some_naive_datetime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NaiveDateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_date_time_utc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rfc3339&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;2016-01-20T15:25:16Z&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The point is that for Calendar to generate a string that says something about the
timezone, it has to get that information from somewhere. It does not “magically”
pull out a timezone assumption out of thin air. It can come from data: for example
implicitly UNIX timestamps are always in UTC. Or an explicit part of the data: RFC 3339
timestamps always contain timezone offset information.
If the timezone information is not contained in input data, programmers have to explictly tell the library about the timezone.
An example of that is the &lt;code class=&quot;highlighter-rouge&quot;&gt;NaiveDateTime.to_date_time_utc&lt;/code&gt; call. This is explicit
and not something hidden that accidentally happens.&lt;/p&gt;

&lt;h2 id=&quot;elixir-and-other-languages&quot;&gt;Elixir and other languages&lt;/h2&gt;

&lt;p&gt;For people choosing a datetime library or considering building a datetime library
this information is useful in any language. If you ever build a timezone library
look at how it is done in JavaScript to see what NOT to do.&lt;/p&gt;

&lt;p&gt;If you are using Elixir, the only
library that implements the principles in this article is the &lt;a href=&quot;https://github.com/lau/calendar&quot;&gt;Calendar library&lt;/a&gt;.
That is the only datetime library I can recommend for Elixir.&lt;/p&gt;

</description>
        <pubDate>Thu, 04 Feb 2016 04:00:00 -0800</pubDate>
        <link>http://www.creativedeletion.com/2016/02/04/timetypes_prevent_bugs.html</link>
        <guid isPermaLink="true">http://www.creativedeletion.com/2016/02/04/timetypes_prevent_bugs.html</guid>
        
        
      </item>
    
      <item>
        <title>Timezone updates need to be fixed</title>
        <description>&lt;figure class=&quot;picture right_img&quot;&gt;
  &lt;img src=&quot;http://www.creativedeletion.com/assets/plane512.jpg&quot; srcset=&quot;http://www.creativedeletion.com/assets/plane512.jpg 1x, http://www.creativedeletion.com/assets/plane1024.jpg 2x&quot; /&gt;
  &lt;figcaption&gt;Fortunately, the technology for keeping planes airborne receive more attention that the information systems for passengers.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;In October I went to ElixirConf &lt;a href=&quot;/2015/10/19/elixirconf-talk-date-time.html&quot;&gt;to talk about time and timezones&lt;/a&gt;. One of the things I talked about was keeping timezone data up to date.&lt;/p&gt;

&lt;p&gt;A good example of that showed itself soon after: On the plane going back it had one of those screens showing the local time at the destination. It was incorrect.&lt;/p&gt;

&lt;h2 id=&quot;event-reminding-software-feature-causes-area-man-to-miss-event&quot;&gt;Event reminding software feature causes area man to miss event&lt;/h2&gt;
&lt;p&gt;About a week later I was playing a 8-a-side football game. But a player had not shown up. As the game was about to end, he showed up, confused.
Why? Because of the way timezone data updates are handled. It is a broken system. The event was arranged with Facebook. Facebook’s timezone data is out of date. So Facebook told the player that the game started at 9pm instead of 8pm.&lt;/p&gt;

&lt;p&gt;A more simple approach such as the local time written on paper, sent with Fax or a text message would not have caused such as problem. But like so many other pieces of software, the Facebook code is “clever” and uses timezone conversions. Facebook thinks it knows where you are and what time it is in that location. When it works, this cleverness can be helpful. But this time it was wrong. When you write code that is clever like that, you have to make sure that the timezone information is up to date. Otherwise it does not work and people get upset.&lt;/p&gt;

&lt;h2 id=&quot;it-is-a-common-problem&quot;&gt;It is a common problem&lt;/h2&gt;

&lt;p&gt;Facebook and Boeing airplanes are not alone in having out of date timezone information. The same goes for all the major operating systems such as Windows, Linux, Mac OS X. And many phones too. And telecom providers. In my experience most systems with timezone information are often out of date.&lt;/p&gt;

&lt;p&gt;The company in the world with the largest market capitalisation (Apple) has this problem. So has number 8 (Facebook).
And they are both tech companies. I think it is an interesting phenomenon. And they are not the only
ones with that problem.&lt;/p&gt;

&lt;h2 id=&quot;it-is-important&quot;&gt;It is important&lt;/h2&gt;

&lt;p&gt;In this case the Facebook event feature failed pretty spectacularly. It reminds me of those photos
with the caption “you had one job”. Facebook events are supposed to tell people about an event and
when it takes place. It failed in this case. Because of out of date timezone data.&lt;/p&gt;

&lt;h2 id=&quot;it-is-not-super-hard-to-get-up-to-date-data&quot;&gt;It is not super hard to get up to date data&lt;/h2&gt;

&lt;p&gt;The timezone data is &lt;a href=&quot;http://www.iana.org/time-zones&quot;&gt;freely available at IANA’s website&lt;/a&gt;.
You do not have to pay for it, anyone can download it and use it.&lt;/p&gt;

&lt;h2 id=&quot;why-has-it-not-been-fixed&quot;&gt;Why has it not been fixed?&lt;/h2&gt;

&lt;p&gt;Why is it that some of the most valueable companies in the world, and tech companies at that, cannot cope with the
challenge of having up to date timezone data?&lt;/p&gt;

&lt;p&gt;Remember when people thought that it was a good idea to only save the two last digits of a year? 90 instead of 1990.
In my experience many programmers just do whatever everyone else is doing. Unless it is an area they care about.
And most programmers do not care about timezone updates. Unless they personally experience problems caused by it.&lt;/p&gt;

&lt;h2 id=&quot;what-people-do-today&quot;&gt;What people do today&lt;/h2&gt;

&lt;p&gt;Very few people seem to take responsibility for having up-to-date timezone data, having a process for it
or even caring much about it.&lt;/p&gt;

&lt;p&gt;In Linux the common way to update timezone data is using software package updates. There is a package called tzdata that
contains both the data and code at the same time. There are several problems with this. One is that it takes a while
from IANA releasing new data to someone manually make a new package version with the new data. Sometimes an update will
be release by IANA, and no packages are ever made! So even if users update their system with the newest packages the
moment they come out, they will be old.&lt;/p&gt;

&lt;p&gt;A second issue is that these
updates are viewed the same way as other software updates. Like a new version of database software. And in order to avoid
regressions, developers/sysadmins will usually have to spend precious time testing things before upgrading software.
It takes time and is seen as a barrier to upgrade software running on a server. How ever small that costs is, it is there.&lt;/p&gt;

&lt;p&gt;So the state of timezone updates today for most people is that it relies on two sets of people that have to manually
do something. If just one of them fail to do that, the result is the timezone data is out of date. And right now
the common thing is for both sets of people to not do it or do it slowly.&lt;/p&gt;

&lt;h2 id=&quot;it-is-just-updated-data-not-a-new-api-or-different-functionality&quot;&gt;It is just updated data, not a new API or different functionality&lt;/h2&gt;

&lt;p&gt;But the data itself is not new software. It is just data. Functionality should not change because of new data.
New timezone data could be seen similarly to setting the clock of the server. This is commonly done automatically.
Or it could be seen as data in a database changing. If you change software, you have to test it to see if it still
works as required. But when a system is running and data is changed in a database due to normal use, the software
is not tested every single time a row is changed, inserted or updated. That would be silly. Because the software
should be made to handle different kinds of data.&lt;/p&gt;

&lt;p&gt;It should be possible to automatically update the timezone data without having to treat it with the same ceremony as with a software update.&lt;/p&gt;

&lt;h2 id=&quot;a-solution&quot;&gt;A solution&lt;/h2&gt;

&lt;p&gt;Imagine if this problem was something that could be handled automatically by software.
It turns out that that is in fact the case! &lt;a href=&quot;https://github.com/lau/tzdata&quot;&gt;Tzdata for Elixir&lt;/a&gt; checks the IANA servers
once a day. If there is a new version of the timezone database available, it will be automatically
downloaded and updated. The future is here, but in this case only distributed to Elixir ;-)&lt;/p&gt;

&lt;h2 id=&quot;the-exception-to-the-rule-offline-embedded-systems&quot;&gt;The exception to the rule. Offline embedded systems&lt;/h2&gt;

&lt;p&gt;Not all systems are connected to the internet. In that case you cannot do to updates automatically
in the same way. But it needs to happen somehow in order to have timezone based calculations be correct.&lt;/p&gt;

&lt;p&gt;If you make a system that uses timezone data, think ahead. The timezone data is updated as often as 10 times a year or more.
In case you have an embedded system that is not connected to the internet all the time, how can that processes be
put in place to make sure it is updated?&lt;/p&gt;

&lt;h2 id=&quot;what-to-do-if-you-do-not-use-elixir&quot;&gt;What to do if you do not use Elixir&lt;/h2&gt;

&lt;p&gt;If your system is on the Internet, but rely on timezone updates that are not from Elixir, what can you do to improve the situation?
One solution would be to implement a similar automatic system that updates automatically using the Internet.&lt;/p&gt;

&lt;p&gt;Another would be for package maintainers
to have an improved process for manually releasing data just after it is released. I do not have high hopes
for this to happen, but maybe someone reading this could help maintain packages and implement a process
to make it more quick and consistent.&lt;/p&gt;

&lt;p&gt;The second part is for users of those packages to have a process for making sure the data is updated as
it become available. Someone
needs to be responsible for it and make sure the data is updated when it is available.&lt;/p&gt;

&lt;h2 id=&quot;computer-professionals-relying-on-manual-processes-for-something-that-is-perfect-for-computers&quot;&gt;Computer professionals relying on manual processes for something that is perfect for computers&lt;/h2&gt;

&lt;p&gt;Not all things are easy to automate using computers. But this is. It is funny how people
who make software to help automate things for someone else, themselves do things manually when
it comes to timezone updates. The current system does not work well. It is time to move on to an automated system.&lt;/p&gt;
</description>
        <pubDate>Thu, 03 Dec 2015 04:00:00 -0800</pubDate>
        <link>http://www.creativedeletion.com/2015/12/03/timezone-updates-need-fixing.html</link>
        <guid isPermaLink="true">http://www.creativedeletion.com/2015/12/03/timezone-updates-need-fixing.html</guid>
        
        
      </item>
    
  </channel>
</rss>
