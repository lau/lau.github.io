<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Creative Deletion</title>
    <description>Lau Taarnskov's blog on tech
</description>
    <link>http://www.creativedeletion.com/</link>
    <atom:link href="http://www.creativedeletion.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 15 Feb 2021 21:06:22 -0600</pubDate>
    <lastBuildDate>Mon, 15 Feb 2021 21:06:22 -0600</lastBuildDate>
    <generator>Jekyll v3.8.6</generator>
    
      <item>
        <title>How to improve your video and audio call stability for $8</title>
        <description>&lt;p&gt;Wireless networking can be a bottleneck for trouble free voice and video calls over the internet.&lt;/p&gt;

&lt;p&gt;&lt;img title=&quot;Ethernet cable&quot; alt=&quot;Ethernet cable&quot; src=&quot;/assets/rj45.jpg&quot; srcset=&quot;/assets/rj452x.jpg 2x&quot; width=&quot;300&quot; height=&quot;295&quot; class=&quot;right_img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For audio and video calls over the internet, a stable connection is important. High network speeds are not necessary for audio calls. &lt;a href=&quot;http://web.archive.org/web/20031204211508/http://www.skype.com/help_faq.html&quot;&gt;Skype was made to work with 33.6 Kbps modems&lt;/a&gt;. Today people that have internet connections that are more than 1000 times faster can have issues with audio dropping. This can be very frustrating. The culprit is often Wi-Fi.&lt;/p&gt;

&lt;p&gt;You might run a test of the Wi-Fi speed and the average speed over many seconds could look OK. But transferring large files is not the same as audio or video calls. The stability matters. If someone turns on a microwave oven and this causes some data to not be transferred, the data can be resent when transferring a file. Maybe the file transfer takes an extra second and it isn’t noticed. However for calls, this disruption can cause visible and audible issues.&lt;/p&gt;

&lt;p&gt;Wireless solutions have a convenience advantage - when they work. The downsides include inconsistency, instability, high latency, slower overall speeds.&lt;/p&gt;

&lt;p&gt;Because of the wireless nature of Wi-Fi it is more subject to interference. It can be interrupted by bluetooth, microwaves, other Wi-Fi networks and all kinds of other electronics.&lt;/p&gt;

&lt;p&gt;Fortunately there is a simple solution: wires. Specifically Ethernet. The standard for wired networking.&lt;/p&gt;

&lt;h2 id=&quot;wi-fi-theoretical-speeds-vs-real-life-speeds&quot;&gt;Wi-Fi theoretical speeds vs real-life speeds&lt;/h2&gt;

&lt;p&gt;One of the biggest advantages of Ethernet over Wi-Fi is stability. Ethernet is also typically faster than Wi-Fi.&lt;/p&gt;

&lt;p&gt;The theoretical maximum Wi-Fi speeds do not compare directly to Ethernet. The theoretical maximum Wi-Fi speeds can only happen under special circumstances. Even with just a single device connected to Wi-Fi, distance and interference reduce the real-life speeds. Additional devices on the same Wi-Fi network also reduce the speeds. Each device on the network has to share the bandwidth so to speak. On Ethernet the speeds are much more consistent and multiple clients can all have consistent high speeds at the same time.&lt;/p&gt;

&lt;p&gt;Is some device on Wi-Fi doing a backup? This slows down the whole Wi-Fi network. Is someone streaming video from the internet? This doesn’t just slow down the internet connection, but the local Wi-Fi network as well. With Ethernet one computer can back up to a storage device on the network, while not interrupting or slowing down the speed of a video call on another computer.&lt;/p&gt;

&lt;h2 id=&quot;security&quot;&gt;Security&lt;/h2&gt;

&lt;p&gt;Ethernet is more secure than Wi-Fi. Through out the years, different encryption mechanisms for Wi-Fi have been developed and weaknesses and exploits for them have been discovered. There is &lt;a href=&quot;https://www.krackattacks.com&quot;&gt;KRACK for WPA2&lt;/a&gt;. An earlier encryption Wired Equivalent Privacy (WEP), despite its name, turned out to not have the equivalent privacy of wired networking.&lt;/p&gt;

&lt;h2 id=&quot;helps-improve-wi-fi&quot;&gt;Helps improve Wi-Fi&lt;/h2&gt;
&lt;p&gt;Any computer or other device that uses Ethernet instead of Wi-Fi will leave more bandwidth for the devices left on Wi-Fi. So for instance if your laptop and Apple TV device is on Ethernet, those do not take away Wi-Fi bandwidth for your phone that is still using Wi-Fi.&lt;/p&gt;

&lt;h2 id=&quot;practical-application&quot;&gt;Practical application&lt;/h2&gt;
&lt;p&gt;In certain cases, wires are not practical and Wi-Fi can be a good second best solution. However when possible I prefer and recommend wired networking.&lt;/p&gt;

&lt;p&gt;If you work from a desk, why not have an ethernet cable available there?&lt;/p&gt;

&lt;p&gt;While Wi-Fi is still convenient, in cases where you have a desk or typically work, it can be useful to have ethernet access there. If you are already plugging in an external monitor or keyboard, why not also plug in to ethernet? Say hello to network stability and speed.&lt;/p&gt;

&lt;p&gt;If you work from different places during the day, you could chose to use Wi-Fi at some parts of the day and go to a desk with Ethernet for meetings when voice call quality and stability is important.&lt;/p&gt;

&lt;h2 id=&quot;the-8-solution&quot;&gt;The $8 solution&lt;/h2&gt;
&lt;p&gt;Ethernet cables come in different lengths and standards. For most people if the cable is shorter than 100 meters, most cables work fine and a lot better than WiFi. You can buy a &lt;a href=&quot;https://www.amazon.com/Monoprice-Flexboot-Ethernet-Patch-Cable/dp/B00AJHCC82/ref=as_li_ss_tl?&amp;amp;linkCode=ll1&amp;amp;tag=creatdelet-20&amp;amp;linkId=d6af2d6423828113dd63b727767e5c75&amp;amp;language=en_US&quot;&gt;Cat 6 cable for less than $8&lt;/a&gt;. One of those can be plugged in to your computer on one end and the other end into a router that is common at home. That’s it.&lt;/p&gt;

&lt;h2 id=&quot;adapters&quot;&gt;Adapters&lt;/h2&gt;
&lt;p&gt;Desktop computers usually already have an ethernet port. Some laptops have an ethernet port as well. For the ones that lack an ethernet port you can buy USB adapters.&lt;/p&gt;

&lt;p&gt;If you use a laptop with Thunderbolt 3, you can get &lt;a href=&quot;https://amzn.to/3u2k4Ff&quot;&gt;docking stations&lt;/a&gt; have built in ethernet ports. This way you can plug in one cable and get power delivery, connection to USB, monitors, keyboard and mouse as well as Ethernet.&lt;/p&gt;

&lt;p&gt;An alternative to a docking station is a simple USB to ethernet adapter. You can leave on always connected to an ethernet cable and then plug the adapter into a USB port of the laptop when at the desk.&lt;/p&gt;

&lt;p&gt;1Gbps Ethernet is more than enough for most people. I use and like the &lt;a href=&quot;https://amzn.to/2LdIAlk&quot;&gt;U Green USB C to 2.5G Ethernet Adapter&lt;/a&gt; It works with Ethernet speeds of up to 2.5 Gbps and is backwards compatible with slower speeds too. At around $22 it is relatively inexpensive. It has an aluminium housing which should help dissipate heat better than plastic - for better stability.&lt;/p&gt;

&lt;h2 id=&quot;remote-work&quot;&gt;Remote work&lt;/h2&gt;
&lt;p&gt;Ethernet is another tool you can use to make remote work more effective and pleasant for yourself and the people you work with. And although the title of this focused on audio and video calls, it can also help with any other kind of network traffic.&lt;/p&gt;

</description>
        <pubDate>Mon, 15 Feb 2021 06:00:00 -0600</pubDate>
        <link>http://www.creativedeletion.com/2021/02/15/ethernet-wifi-8-voice-call.html</link>
        <guid isPermaLink="true">http://www.creativedeletion.com/2021/02/15/ethernet-wifi-8-voice-call.html</guid>
        
        
      </item>
    
      <item>
        <title>You might not need the Calendar or Timex libraries</title>
        <description>&lt;p&gt;Five years ago Elixir code would usually have to call third party applications to handle date, time and time zones. And blog posts (including on this blog), tutorials, books, and code still point people to using third party libraries. But today for most purposes, they are no longer necessary.&lt;/p&gt;

&lt;p&gt;Since Elixir 1.3 more and more date and time functionality has been added to the Elixir time zone library.&lt;/p&gt;

&lt;p&gt;Before Elixir 1.3 there were no native date/time types built into Elixir. With &lt;a href=&quot;/2016/11/12/elixirconf-2016-date-time.html&quot;&gt;Elixir 1.3 that changed&lt;/a&gt;. However to do time zone calculations you still needed either the &lt;a href=&quot;https://github.com/lau/calendar&quot;&gt;Calendar library&lt;/a&gt; or &lt;a href=&quot;https://github.com/bitwalker/timex&quot;&gt;Timex library&lt;/a&gt; which would use the &lt;a href=&quot;https://hex.pm/packages/tzdata&quot;&gt;Tzdata library&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In Elixir 1.8 the &lt;code class=&quot;highlighter-rouge&quot;&gt;Calendar.TimeZoneDatabase&lt;/code&gt; behaviour was introduced. This means that you can use Elixir standard library functions to do time zone calculations. So today the standard library lets you do things such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Comparison and difference/subtraction/addition calculations for date/time types&lt;/li&gt;
  &lt;li&gt;Time zone calculations (&lt;a href=&quot;https://hexdocs.pm/elixir/Calendar.TimeZoneDatabase.html&quot;&gt;with a time zone database configured&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Safe polymorphism that lets you e.g. use a &lt;code class=&quot;highlighter-rouge&quot;&gt;DateTime&lt;/code&gt; with a &lt;a href=&quot;https://hexdocs.pm/elixir/Date.html#day_of_year/1&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Date&lt;/code&gt; function&lt;/a&gt;, but not the &lt;a href=&quot;https://hexdocs.pm/elixir/DateTime.html#to_iso8601/2&quot;&gt;other way around&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Convert to and from Unix time (whole seconds, milliseconds and more)&lt;/li&gt;
  &lt;li&gt;Day of year, day of week, quarter, leap year&lt;/li&gt;
  &lt;li&gt;Date ranges&lt;/li&gt;
  &lt;li&gt;Format and parse to/from ISO 8601 formats&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The master branch of Elixir adds &lt;a href=&quot;https://github.com/elixir-lang/elixir/blob/b028ac88a8b3faabcba5969944123925613f3614/lib/elixir/lib/calendar.ex#L479&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Calendar.strftime/3&lt;/code&gt; for formatting date/time&lt;/a&gt;. This will be released with Elixir 1.11 - scheduled for release around October 2020.&lt;/p&gt;

&lt;h2 id=&quot;why-the-standard-library-over-a-third-party-library&quot;&gt;Why the standard library over a third party library?&lt;/h2&gt;

&lt;p&gt;The Elixir standard library is always there and the same for every developer. If an Elixir standard library function does the same thing as a third party one, I tend to choose the standard library. Some of the reasons include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fewer dependencies to manage.&lt;/li&gt;
  &lt;li&gt;In general the standard library has more contributions and maintenance. This is also important over the long term, looking years ahead.&lt;/li&gt;
  &lt;li&gt;Every developer using Elixir uses the standard library. More developers will be familiar with it today and in the future.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;when-should-you-use-a-third-party-library&quot;&gt;When should you use a third party library?&lt;/h2&gt;

&lt;p&gt;If the functionality you need is not available in the standard library, it can make sense to use a third party library. But you don’t have to use them for anything that the standard library can do.&lt;/p&gt;

&lt;p&gt;If you are starting a new project and are used to using the Calendar or Timex libraries, you could first check to see if the functionality is available in the standard library before adding them as dependencies. And even if they are dependencies, make sure to only use them for functionality not available in the standard library.&lt;/p&gt;

&lt;h2 id=&quot;mix-and-match&quot;&gt;Mix and match&lt;/h2&gt;

&lt;p&gt;Today the libraries all usually use the same types (&lt;code class=&quot;highlighter-rouge&quot;&gt;Date&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Time&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;NaiveDateTime&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;DateTime&lt;/code&gt;) as the standard library. So you can call the standard library (e.g. &lt;a href=&quot;https://hexdocs.pm/elixir/DateTime.html#utc_now/1&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DateTime.utc_now/1&lt;/code&gt;&lt;/a&gt;) and pass a datetime to a third party library to do something that the standard library doesn’t do. Or take a result from a third party library and pass it to a standard library function.&lt;/p&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;/h2&gt;

&lt;p&gt;For time zone calculations specifically you will have to add a timezone database library to the dependencies of your application.&lt;/p&gt;

&lt;p&gt;Currently the most popular option is the tzdata library by yours truly. See the &lt;a href=&quot;https://github.com/lau/tzdata#getting-started&quot;&gt;tzdata&lt;/a&gt; or &lt;a href=&quot;https://hexdocs.pm/elixir/DateTime.html#module-time-zone-database&quot;&gt;Elixir documentation&lt;/a&gt; for how to set it up. You basically need &lt;code class=&quot;highlighter-rouge&quot;&gt;:tzdata&lt;/code&gt; as a dependency in your mix file and then this line in your configuration: &lt;code class=&quot;highlighter-rouge&quot;&gt;config :elixir, :time_zone_database, Tzdata.TimeZoneDatabase&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For anything else see the documentation for &lt;a href=&quot;https://hexdocs.pm/elixir/Date.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Date&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://hexdocs.pm/elixir/DateTime.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DateTime&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://hexdocs.pm/elixir/NaiveDateTime.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NaiveDateTime&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://hexdocs.pm/elixir/Time.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Time&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;library-authors&quot;&gt;Library authors&lt;/h2&gt;

&lt;p&gt;If you maintain any Elixir library that needs to do time zone calculations the functions &lt;a href=&quot;https://hexdocs.pm/elixir/DateTime.html#from_naive/3&quot;&gt;from_naive/3&lt;/a&gt; and &lt;a href=&quot;https://hexdocs.pm/elixir/DateTime.html#shift_zone/3&quot;&gt;shift_zone/3&lt;/a&gt; can be used for time zone calculations.&lt;/p&gt;

&lt;p&gt;You don’t even need to have the &lt;code class=&quot;highlighter-rouge&quot;&gt;tzdata&lt;/code&gt; package as a dependency. Instead require the end-user of the library to &lt;a href=&quot;https://hexdocs.pm/elixir/DateTime.html#module-time-zone-database&quot;&gt;set a database for Elixir&lt;/a&gt; to allow time zone calculations. If &lt;code class=&quot;highlighter-rouge&quot;&gt;{error, :utc_only_time_zone_database}&lt;/code&gt; is returned - meaning such a library hasn’t been configured - errors can be raised as seen appropriate.&lt;/p&gt;

&lt;p&gt;This way the user of the library is able to choose any time zone database library that implements the &lt;a href=&quot;behaviour https://hexdocs.pm/elixir/Calendar.TimeZoneDatabase.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Calendar.TimeZoneDatabase&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;looking-ahead&quot;&gt;Looking ahead&lt;/h2&gt;

&lt;p&gt;Many projects can get their date/time functionality covered with the functions in the standard library and tzdata (or equivalent &lt;code class=&quot;highlighter-rouge&quot;&gt;TimeZoneDatabase&lt;/code&gt;). And with each new recent version of Elixir more has been added.&lt;/p&gt;

&lt;p&gt;However it was never meant to do everything. Third party libraries can still fill in the gaps to complement the functions in the standard library.&lt;/p&gt;

</description>
        <pubDate>Mon, 25 May 2020 07:00:00 -0500</pubDate>
        <link>http://www.creativedeletion.com/2020/05/25/calendar-standard-library-2020.html</link>
        <guid isPermaLink="true">http://www.creativedeletion.com/2020/05/25/calendar-standard-library-2020.html</guid>
        
        
      </item>
    
      <item>
        <title>Adding a function to the Elixir standard library that I hope will not be used</title>
        <description>&lt;p&gt;Last week a function (&lt;code class=&quot;highlighter-rouge&quot;&gt;NaiveDateTime.local_now/0&lt;/code&gt;) was added to the Elixir master branch. That means it will most likely be present in the coming Elixir version 1.10. The function returns the current “local” date and time for the machine it is running on.&lt;/p&gt;

&lt;p&gt;I wrote that function and I hope you will &lt;strong&gt;not&lt;/strong&gt; use it in production code! There are a few exceptions, including:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;If your Elixir app is an embedded or desktop app and you want to display a clock to the user, it can make sense to use the “local time” if the local time setting is already taken care of. However if you have the IANA tzdata identifier (e.g. “Europe/London”) you can use that with &lt;a href=&quot;https://hexdocs.pm/elixir/DateTime.html#now/2&quot;&gt;DateTime.now/2&lt;/a&gt; instead.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you are using the “iex” console on your desktop or laptop and just want a NaiveDateTime for your “local time” for some reason.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The main reason I think the existence of this function is good is that it comes with documentation. The documentation can tell people that in most cases it is a bad idea to get the “local time” and what to do instead. If no such function is there some developers will complain - or use &lt;a href=&quot;http://erlang.org/doc/man/calendar.html#local_time-0&quot;&gt;Erlang’s local_time function&lt;/a&gt; instead.&lt;/p&gt;

&lt;p&gt;For software running on servers connected to the internet, the users can be in all kinds of time zones and it is those time zones that are interesting. Not what the time zone on the server happens to be set to.&lt;/p&gt;

&lt;p&gt;See more in the blog-post &lt;a href=&quot;http://www.creativedeletion.com/2015/08/07/why-not-to-use-server-local-time.html&quot;&gt;Why not to ask the server for its “local time”&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Wed, 13 Nov 2019 06:00:00 -0600</pubDate>
        <link>http://www.creativedeletion.com/2019/11/13/elixir-function-never-use-local-now.html</link>
        <guid isPermaLink="true">http://www.creativedeletion.com/2019/11/13/elixir-function-never-use-local-now.html</guid>
        
        
      </item>
    
      <item>
        <title>Tzdata library downloaded 10 million times - Elixir getting more popular?</title>
        <description>&lt;p&gt;This week the &lt;a href=&quot;https://hex.pm/packages/tzdata&quot;&gt;Elixir Tzdata library&lt;/a&gt; crossed 10 million downloads on hex - the package manager for &lt;a href=&quot;https://elixir-lang.org&quot;&gt;Elixir&lt;/a&gt;. It is a number displayed on the hex website and a while ago I started paying attention to it.&lt;/p&gt;

&lt;p&gt;To me the most interesting thing is that most of those downloads have happened within the last 12 months. Almost a third of them have happened in the last 90 days. Tzdata has been on hex as its own package for about 1700 days by the time of writing. Almost 30% of all of the downloads happened in the most recent 5% of the time the package has been available.&lt;/p&gt;

&lt;p&gt;Looking at other packages the numbers look similar in that they are downloaded more often than a year ago.&lt;/p&gt;

&lt;h2 id=&quot;what-does-a-download-mean&quot;&gt;What does a download mean?&lt;/h2&gt;

&lt;p&gt;From my own experience a lot of downloads happen from running automated tests on Continuous Integration systems. When you run a test, this can trigger multiple downloads of a package that is a dependency.&lt;/p&gt;

&lt;p&gt;If one project has a certain hex package as a dependency, that can easily cause hundreds or thousands of downloads over one year.&lt;/p&gt;

&lt;p&gt;On its own the number does not mean that much. But looking at the development of the numbers over time I think it can be used as a non-scientific proxy for how much a package is used. And since the trend seem to be similar across various often-downloaded packages also a proxy for use of the Elixir language. This would suggest that Elixir is getting used more.&lt;/p&gt;
</description>
        <pubDate>Thu, 24 Oct 2019 07:00:00 -0500</pubDate>
        <link>http://www.creativedeletion.com/2019/10/24/elixir-tzdata-10mm-downloads.html</link>
        <guid isPermaLink="true">http://www.creativedeletion.com/2019/10/24/elixir-tzdata-10mm-downloads.html</guid>
        
        
      </item>
    
      <item>
        <title>ElixirConf 2019 talk: Date, Time, and Time Zones in Elixir 1.9</title>
        <description>&lt;p&gt;I went to ElixirConf 2019 in Aurora, Colorado, USA to give a talk: “Date, Time, and Time Zones in Elixir 1.9”. &lt;a href=&quot;https://www.youtube.com/watch?v=_E988mvPIzU&quot;&gt;A video recording&lt;/a&gt; is available on YouTube:&lt;/p&gt;

&lt;iframe width=&quot;720&quot; height=&quot;405&quot; src=&quot;https://www.youtube.com/embed/_E988mvPIzU&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Amongst other things it covers how you can now do time zone conversions with &lt;a href=&quot;https://hexdocs.pm/elixir/DateTime.html#module-time-zone-database&quot;&gt;Elixir standard library functions&lt;/a&gt; - without libraries such as Calendar or Timex.&lt;/p&gt;
</description>
        <pubDate>Fri, 18 Oct 2019 07:00:00 -0500</pubDate>
        <link>http://www.creativedeletion.com/2019/10/18/elixirconf-2019.html</link>
        <guid isPermaLink="true">http://www.creativedeletion.com/2019/10/18/elixirconf-2019.html</guid>
        
        
      </item>
    
      <item>
        <title>How to set timestamps to UTC DateTimes in Ecto</title>
        <description>&lt;p&gt;In Ecto versions 2.1 through 3.x the &lt;a href=&quot;https://hexdocs.pm/ecto/Ecto.Schema.html#timestamps/1&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Ecto.Schema.timestamps/1&lt;/code&gt;&lt;/a&gt; feature (&lt;code class=&quot;highlighter-rouge&quot;&gt;updated_at&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;inserted_at&lt;/code&gt;) has been &lt;code class=&quot;highlighter-rouge&quot;&gt;naive_datetime&lt;/code&gt; by default. I highly recommend using &lt;code class=&quot;highlighter-rouge&quot;&gt;utc_datetime&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;utc_datetime_usec&lt;/code&gt; instead. This article will show how to do that.&lt;/p&gt;

&lt;h2 id=&quot;setting-the-type&quot;&gt;Setting the type&lt;/h2&gt;

&lt;p&gt;One way to set the timestamps type is to put the line &lt;code class=&quot;highlighter-rouge&quot;&gt;@timestamps_opts [type: :utc_datetime]&lt;/code&gt; in any module where &lt;code class=&quot;highlighter-rouge&quot;&gt;use Ecto.Schema&lt;/code&gt; is present. Example:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ecto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Schema&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;@timestamps_opts&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;type:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:utc_datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;schema&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;users&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:string&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;timestamps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s it. Add that &lt;code class=&quot;highlighter-rouge&quot;&gt;@timestamps_opts&lt;/code&gt; module attribute everywhere &lt;code class=&quot;highlighter-rouge&quot;&gt;use Ecto.Schema&lt;/code&gt; is present. You could stop reading now and go and make that change to your Ecto project. Continue reading if you want more details:&lt;/p&gt;

&lt;h2 id=&quot;more-details&quot;&gt;More details&lt;/h2&gt;

&lt;p&gt;An alternative to the &lt;code class=&quot;highlighter-rouge&quot;&gt;@timestamps_opts&lt;/code&gt; way is to pass the type as an argument when calling the timestamps/1 function in the schema:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;n&quot;&gt;schema&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;users&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:string&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;timestamps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;type:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:utc_datetime_usec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Either way works. I personally tend to prefer using the &lt;code class=&quot;highlighter-rouge&quot;&gt;@timestamps_opts&lt;/code&gt; module attribute.&lt;/p&gt;

&lt;h3 id=&quot;ecto-3-types-for-timestamps-and-microseconds&quot;&gt;Ecto 3 types for timestamps and microseconds&lt;/h3&gt;

&lt;p&gt;Ecto 3 has a choice of four types to use for the &lt;code class=&quot;highlighter-rouge&quot;&gt;timestamps&lt;/code&gt; function: &lt;code class=&quot;highlighter-rouge&quot;&gt;:utc_datetime&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;:utc_datetime_usec&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;:naive_datetime&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;:naive_datetime_usec&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;They are equivalent to the following Elixir types:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Ecto 3 type&lt;/th&gt;
      &lt;th&gt;Elixir type&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Supports microseconds?&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Supports &lt;a href=&quot;https://hexdocs.pm/elixir/DateTime.html#to_unix/2&quot;&gt;DateTime functions?&lt;/a&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Supports NaiveDateTime functions?&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:utc_datetime_usec&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DateTime&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;✓&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;✓&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;✓&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:utc_datetime&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DateTime&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;✓&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;✓&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:naive_datetime_usec&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NaiveDateTime&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;✓&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;✓&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:naive_datetime&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NaiveDateTime&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;✓&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;migrations-and-microseconds&quot;&gt;Migrations and microseconds&lt;/h3&gt;

&lt;p&gt;If your Ecto project is currrently using &lt;code class=&quot;highlighter-rouge&quot;&gt;naive_datetime&lt;/code&gt; for timestamps and you switch to &lt;code class=&quot;highlighter-rouge&quot;&gt;utc_datetime&lt;/code&gt; in your schemas, you don’t have to do any changes to migrations for it to work. That being said here is some information about microsecond precision:&lt;/p&gt;

&lt;p&gt;I like to use &lt;code class=&quot;highlighter-rouge&quot;&gt;:utc_datetime_usec&lt;/code&gt; for the timestamps because it has microsecond precision instead of just whole seconds. In certain cases this can be useful. In order to have microsecond precision, make sure that the type created in the database table stores microseconds. This can be done by using &lt;code class=&quot;highlighter-rouge&quot;&gt;utc_datetime_usec&lt;/code&gt; in the migration.&lt;/p&gt;

&lt;p&gt;If you do not want to use microsecond precision, use &lt;code class=&quot;highlighter-rouge&quot;&gt;:utc_datetime&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;:utc_datetime_usec&lt;/code&gt; in your schemas and make sure that the migration for the timestamps match in terms of having “_usec” at the end or not.&lt;/p&gt;

&lt;p&gt;A peculiar detail is that in migrations, unlike schemas, “utc_datetime” and “naive_datetime” both do the same thing. It is “_usec” that matters in migrations. In Postgres the type is either &lt;code class=&quot;highlighter-rouge&quot;&gt;timestamp without time zone&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;timestamp(0) without time zone&lt;/code&gt;. The “(0)” part means that fractional seconds are not stored.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Ecto 3 migration type&lt;/th&gt;
      &lt;th&gt;Postgres type&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Stores microseconds?&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:utc_datetime_usec&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;timestamp without time zone&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;✓&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:naive_datetime_usec&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;timestamp without time zone&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;✓&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:utc_datetime&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;timestamp without time zone(0)&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:naive_datetime&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;timestamp without time zone(0)&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;No&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;As an aside - you might wonder why Ecto uses a Postgres type called “timestamp &lt;em&gt;without time zone&lt;/em&gt;” even though we know that the time zone is UTC, but that is a subject for another blog post. For the type in the postgres database, the thing that counts is whether there is a (0) at the end or not: &lt;code class=&quot;highlighter-rouge&quot;&gt;timestamp without time zone(0)&lt;/code&gt; for whole seconds and &lt;code class=&quot;highlighter-rouge&quot;&gt;timestamp without time zone&lt;/code&gt; for the Ecto types that end in &lt;code class=&quot;highlighter-rouge&quot;&gt;_usec&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To make sure the migrations have precision you want (usec or whole seconds), you can specify the type in the migrations when creating a table like so:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;YourAppNameHere&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Repo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Migrations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CreateUsers&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ecto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Migration&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;change&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:string&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;timestamps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;type:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:utc_datetime_usec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I like this approach because it is explicit and consistently works the same way regardsless of configuration. However an alternative to setting the type in the migration files is to use config. Putting the following in &lt;code class=&quot;highlighter-rouge&quot;&gt;config.exs&lt;/code&gt; will use microsecond precision when running the migrations even if the migration files do not specify this and just say &lt;code class=&quot;highlighter-rouge&quot;&gt;timestamps()&lt;/code&gt;:
&lt;code class=&quot;highlighter-rouge&quot;&gt;config :your_app_name_here, YourAppNameHere.Repo, migration_timestamps: [type: :utc_datetime_usec]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you have existing tables and you want to change the microsecond precision with an Ecto migration here is an example of a migration that does that. In this case using microsecond precision:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;YourAppNameHere&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Repo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Migrations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MakeTimestampsUsec&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ecto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Migration&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;change&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# For each of the listed tables, change the type of :inserted_at and :updated_at to microsecond precision&lt;/span&gt;
    &lt;span class=&quot;sx&quot;&gt;~w/users products another_table/&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_atom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;alter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;modify&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:inserted_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:utc_datetime_usec&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;modify&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:updated_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:utc_datetime_usec&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;ecto-2&quot;&gt;Ecto 2&lt;/h2&gt;
&lt;p&gt;&lt;a name=&quot;ecto2&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In Ecto 2 (starting from version 2.1) there are two datetime types instead of four. Microseconds have their own separate setting for timestamps: &lt;code class=&quot;highlighter-rouge&quot;&gt;usec&lt;/code&gt; which is a boolean. &lt;code class=&quot;highlighter-rouge&quot;&gt;[type: :utc_datetime, usec: true]&lt;/code&gt; in Ecto 2 is the equivalent of &lt;code class=&quot;highlighter-rouge&quot;&gt;[type: :utc_datetime_usec]&lt;/code&gt; in Ecto 3.&lt;/p&gt;

&lt;p&gt;As with Ecto 3 you can put a &lt;code class=&quot;highlighter-rouge&quot;&gt;@timestamps_opts&lt;/code&gt; everywhere &lt;code class=&quot;highlighter-rouge&quot;&gt;use Ecto.Schema&lt;/code&gt; is present:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@timestamps_opts [type: :utc_datetime, usec: true]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Make sure to set &lt;code class=&quot;highlighter-rouge&quot;&gt;usec&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; in depending on the type in the database.&lt;/p&gt;

&lt;h2 id=&quot;why&quot;&gt;Why&lt;/h2&gt;

&lt;p&gt;This text has covered &lt;em&gt;how&lt;/em&gt; to use UTC DateTimes for Ecto timestamps instead of NaiveDateTime. A later article will go more into &lt;em&gt;why&lt;/em&gt; this is a good idea. It is related to &lt;a href=&quot;/2019/01/08/data-types-assumptions.html&quot;&gt;“keeping the units around” in your data&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;P.S. At the end of August I will be speaking about Date, Time and Timezones in Elixir 1.9 at &lt;a href=&quot;https://elixirconf.com/2019&quot;&gt;ElixirConf US 2019&lt;/a&gt; in Colorado.&lt;/p&gt;
</description>
        <pubDate>Mon, 17 Jun 2019 07:00:00 -0500</pubDate>
        <link>http://www.creativedeletion.com/2019/06/17/utc-timestamps-in-ecto.html</link>
        <guid isPermaLink="true">http://www.creativedeletion.com/2019/06/17/utc-timestamps-in-ecto.html</guid>
        
        
      </item>
    
      <item>
        <title>Data types, assumptions and how a spacecraft crashed</title>
        <description>&lt;p&gt;In maths and physics classes in school I was taught to always keep track of the units when doing calculations. If you do some calculation and the result is just a number - that is not good enough. How fast is a train travelling? 80? 80 what? 80 bananas? If you keep track of the units you can do all kinds of calculations and have an easier time figuring out if it is 80 meters, 80 meters per second, 80 km/h, or 80 miles per hour. Throughout the calculations the units are always there. And at the end your result will include the unit.&lt;/p&gt;

&lt;p&gt;However in programming, developers are not always keeping track of units so rigorously. In this article I will go through some advantages of doing so.&lt;/p&gt;

&lt;h2 id=&quot;missing-and-assumed-information-versus-explicit-data&quot;&gt;Missing and assumed information versus explicit data&lt;/h2&gt;

&lt;p&gt;If you have “10.00 US Dollars” written down, both the number “10.00” and the “US Dollars” part are data. Data can be very useful to both computers and humans. If some data is deemed to be needed, but not present, humans or computer programs can make some assumptions or use some made up data based on a default or an algorithm. However if this made up data or assumption is incorrect, it can lead to problems.&lt;/p&gt;

&lt;p&gt;One way of representing a price of 10.00 US Dollars is simply using an integer or a decimal number:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;price: #Decimal&amp;lt;10.00&amp;gt;&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;The information about which currency the decimal represents is not present in the data itself. So you need to look at the context and look outside of the data present here to find out what currency it is.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A way to improve this a bit is to add the unit to the name of a database column or variable name. So instead of calling the column simply “price”, we can call it “price_usd”:
&lt;code class=&quot;highlighter-rouge&quot;&gt;price_usd: #Decimal&amp;lt;10.00&amp;gt;&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;This is better than nothing. But if that value is taken out of context and passed to a function as just a decimal number, the information about the currency is not there anymore.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Another way is to represent this with both the raw number value and a separate part representing the currency code:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;ss&quot;&gt;price_amount:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#Decimal&amp;lt;10.00&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;price_currency:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;USD&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;To take it further we can have a type representing money:
&lt;code class=&quot;highlighter-rouge&quot;&gt;price: %Money{amount: #Decimal&amp;lt;10.00&amp;gt;, currency_code: USD}&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;This money-specific custom type can be used in a programming language in combination with the previous structure with two fields read from a database and put into the “Money” type struct. Compared to the first example of just having a decimal, in the code we now have a type that tells us both that it is money - not just any Decimal - and what currency it is.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;computer-checking-units-vs-assumptions-about-someone-having-read-something&quot;&gt;Computer checking units vs. assumptions about someone having read something&lt;/h2&gt;

&lt;p&gt;If all of the money amounts in a system is handled with such a money type, this can prevent certain problems. For instance if you try to add two amounts money and they have different currencies, this must be taken into account. Adding 10 USD and 10 EUR is easy to do if they are just simple numbers. The result is 20. But 20 what? It doesn’t make sense. With a type that includes the “unit” (in this case the currency), functions can include checks to prevent mixing currencies incorrectly or perhaps convert currencies before adding them together.&lt;/p&gt;

&lt;h2 id=&quot;getting-data-into-the-system&quot;&gt;Getting data into the system&lt;/h2&gt;

&lt;p&gt;Do not make up fake data based on loose assumptions. If you have a parsing function to parse strings and make them into Money structs don’t assume some default currency if a currency is missing. E.g. when parsing “$10.00 USD” it is fine to just make that into a Money struct with 10.00 USD. But if a string only contains “10.00” then the information about the currency is not present in the data. It might be tempting to have “default currency” and just have a general parsing function assume that if you see “10.00” then assume that it is USD. This is dangerous. Instead the parsing function should return an error and say that the currency code is missing. It is better to raise errors in the software than to get bad data into your system. An example of what not to do is how in Ruby the &lt;a href=&quot;https://stackoverflow.com/questions/33879855/why-does-23-dogs-get-parsed-to-23-november-2015-in-pry-but-3-dogs-gives-a-p&quot;&gt;Date.parse method will parse “23 dogs” as the 23rd of November 2018&lt;/a&gt;. Or whatever the current month and year is. (“3 dogs” results in an error though).&lt;/p&gt;

&lt;p&gt;Parsing should not make too many assumptions and add fake data if some data is missing. Like ignoring “dogs” and adding a year and month that was no where to be found in the string being “parsed”. In that case it is not just parsing. It is parsing and some complicated random data generation combined into one confusing method.&lt;/p&gt;

&lt;p&gt;In some cases you have data coming in that does not include all the information you want. Imagine a CSV file with amounts that represent dollar amounts. The people that gave you this data maybe told you in person or over the phone that the numbers represent USD amounts even if the USD currency code is nowhere to be found in the CSV file. It would be good if the currency code was present in the CSV file. However if it is not possible to convince the producer of the data to include the currency code, you can resort to adding the currency code just after parsing it.&lt;/p&gt;

&lt;p&gt;If a programmer knows that the string is in fact representing an amount of “USD” even though USD is not present in the data being parsed, the amount “10.00” can be parsed as a number. Then programmers can create a new Money struct with a combination of the parsed number and explicitly putting “USD” in there. This way the parsing function is simply parsing the data that is actually there (10.00). Then the information about the currency (USD) is separately and explicitly being defined in the code for that specific data source. So when someone is later reading the code, they can see that this assumption is there and that is where the currency part comes from, rather than from the parsed input.&lt;/p&gt;

&lt;p&gt;The important thing to be clear about is that if you have “10.00” going in and Money struct with “USD” going out at the other end, you are not just parsing data. You are parsing and also adding data about currency based on an assumption.&lt;/p&gt;

&lt;p&gt;I think that in general it is best if data is not silently created by default. A money amount parsing function that defaults to a certain currency (USD) might seem innocent enough. It can be convenient in some cases. But convenience in one situation can be silent creation of bad data in another situation.&lt;/p&gt;

&lt;h2 id=&quot;getting-data-out-of-the-system&quot;&gt;Getting data out of the system&lt;/h2&gt;

&lt;p&gt;Whether data is being passed around inside the boundaries of a system or to an entirely different system, keeping track of the units is useful in both cases. If the units are properly determined upon entry into the system and kept all along, they are right there and available for when they are to be exported out of the system or sent to other systems. For instance with a JSON HTTP API. So instead of an API having a field for a price containing just a decimal value, we can provide both the decimal &lt;em&gt;and&lt;/em&gt; the the currency together in the API. This means that other systems will also have this currency information. Just like we would want other people to provide this kind of information to our system, we can provide it to others. If we keep track of it.&lt;/p&gt;

&lt;h2 id=&quot;communication-across-systems&quot;&gt;Communication across systems&lt;/h2&gt;

&lt;p&gt;If everyone makes sure to keep track of units as soon as the data is either created in that system or read from another system that is a good start. Then if everyone also includes the units when providing data to other systems, this in turn makes it easier for those systems to get the units right as they go from one system to another.&lt;/p&gt;

&lt;h2 id=&quot;space-craft-destroyed-by-incorrect-assumption-of-unit&quot;&gt;Space craft destroyed by incorrect assumption of unit&lt;/h2&gt;

&lt;figure class=&quot;picture right_img&quot;&gt;
  &lt;img src=&quot;/assets/Mars_Climate_Orbiter_2.jpg&quot; /&gt;
  &lt;figcaption&gt;Mars Climate Orbiter&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The Mars Climate Orbiter was launched into space in 1998. In September 1999 before the mission was completed the spacecraft burned up in the atmosphere of Mars.&lt;/p&gt;

&lt;p&gt;Later, many people have used this failure as an example of not following sound engineering practices and suggested different solutions and how those solutions could have prevent failure. I am not the first one to sit in an armchair and write about how it could have been done differently. But I will still use this as an example because it seems like a fun example to use. &lt;a href=&quot;https://www.creativedeletion.com/2016/11/12/elixirconf-2016-date-time.html&quot;&gt;I used the same example for a talk in 2016&lt;/a&gt; where I briefly touched on the same subject about being explicit about data.&lt;/p&gt;

&lt;p&gt;The reason that the space craft burned up was that one part of the system was receiving numbers representing Newton seconds, but using them as if they were pound-force seconds.
Imagine that you have an API that provides information. Instead of simply using an integer or a float, the API could include a unit.&lt;/p&gt;

&lt;p&gt;Imagine that the consumer of the API was expecting a value in pound-force seconds tagged with a unit. So instead of just sending a decimal such as “2.345” it would send “2.345 N s”.
And the consumer of the API would read and verify the unit. On the consumer side it would receive the unit as “N s”. And verify that it is pounds as expected… Hold on a minute. “N s” is not pounds. The software on the consumer side would raise an error because “N s” would not match the expected unit. This error would be seen in tests before sending the system into production. Perhaps this would prevent the mission from failure. Keeping the units around allows software to be written in assertive way to make sure that the right units are sent to it.&lt;/p&gt;

&lt;h2 id=&quot;using-incorrect-units&quot;&gt;Using incorrect units&lt;/h2&gt;

&lt;p&gt;A unit is information. And wrong information is worse than a lack of information. Using wrong units is worse than not using any units. For instance representing 10 meters as 10 feet is worse than just using the integer 10. A cake recipe that specifies 1kg of salt instead of 1 teaspoon of salt is worse than just specifying “salt to taste”. Have you ever tasted a cake made with too much salt? I once stored both salt and sugar in unlabelled containers and used salt instead of sugar. Let’s just say that I would not recommend doing that.&lt;/p&gt;

&lt;h2 id=&quot;other-kinds-of-units&quot;&gt;Other kinds of units&lt;/h2&gt;

&lt;p&gt;Besides currency codes, these principles apply to other “units” including: lengths, temperatures, weights, timezone identifiers and time zone offsets in combinations with datetimes, and more.&lt;/p&gt;

&lt;h2 id=&quot;communication-and-applications-interfaces&quot;&gt;Communication and applications interfaces&lt;/h2&gt;

&lt;p&gt;Writing computer programs involves both communicating with humans and computers. The source code should be readable by current programmers, future programmers and at the same being understood by computers. Data is not different from source code in that regard. A human can read some data and make better decisions and use of the data if it is correct and sufficient. The same goes for computer systems.&lt;/p&gt;

&lt;p&gt;Having good data can be useful to both programmers and computer systems. It could be the programmer that reads the code a month after writing it. Or other programmers that read it later. It could be a function in a library that can make use of the data. Or it can be code in other systems that read the data produced by your system. Be it preventing a baker from adding too much salt, a space craft from burning or helping a programmer more easily reading code and adding features to it.&lt;/p&gt;

&lt;p&gt;P.S. In a future post I will expand on these ideas and how it relates to the date and time types in &lt;a href=&quot;https://www.elixir-lang.org/&quot;&gt;Elixir&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Tue, 08 Jan 2019 06:00:00 -0600</pubDate>
        <link>http://www.creativedeletion.com/2019/01/08/data-types-assumptions.html</link>
        <guid isPermaLink="true">http://www.creativedeletion.com/2019/01/08/data-types-assumptions.html</guid>
        
        
      </item>
    
      <item>
        <title>Reasons for using Elixir instead of cron</title>
        <description>&lt;p&gt;Why use multiple lines of &lt;a href=&quot;https://elixir-lang.org&quot;&gt;Elixir&lt;/a&gt; instead of a single line of &lt;a href=&quot;https://en.wikipedia.org/wiki/Cron&quot;&gt;cron&lt;/a&gt;? Cron has been a staple in the toolbox for developers making web applications. But with Elixir (or other languages based on the Erlang virtual machine) it is not as necessary anymore.&lt;/p&gt;

&lt;p&gt;Using Elixir over cron has some advantages, including:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If your application runs, your scheduled job will run. The supervisor takes care of this.&lt;/li&gt;
  &lt;li&gt;If there are errors, they will be reported to the same place as other errors from your app.&lt;/li&gt;
  &lt;li&gt;One less runtime dependency - you don’t need cron.&lt;/li&gt;
  &lt;li&gt;The source code that schedules the job to run is in the same language and codebase as the rest of the app.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;before-elixir&quot;&gt;Before Elixir&lt;/h1&gt;

&lt;figure class=&quot;picture right_img&quot;&gt;
  &lt;img src=&quot;/assets/greenwich_clock.jpg&quot; srcset=&quot;/assets/greenwich_clock.jpg 1x, /assets/greenwich_clock2x.jpg 2x&quot; /&gt;
  &lt;figcaption&gt;Gratuitous photo of an old clock in Greenwich.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Imagine that it is the year 2000 and you are developing a web application using PHP. You want to periodically run a command to delete some temporary files from a directory. PHP application code is usually run when someone goes to their browser and clicks a link to you web site. However you do not want to run that command every time someone clicks a link to you website. So you decide to use cron. Just a single line of slightly cryptic code will make cron execute a command of your choosing. You manually add the cron entry to the server and verify that it works.&lt;/p&gt;

&lt;p&gt;Then a year later you move the application to a new server. You make sure that PHP is there and that it has access to a MySQL server. Everything seems to be working fine. Shortly after you stop working on that application and new developers take over. They notice that server is starting to run out of space. A directory with files is growing and growing in size. They are not sure if the files can be deleted or not. Oops. When moving to the new server you forgot to add the cron job to the new server. However there were no warnings. And the PHP source code did not have any code that deleted the files.&lt;/p&gt;

&lt;p&gt;The single line added to the crontab was a piece of the system. But because it manually added on a server and not added to the PHP source code, it was not part of the documented history of the system.&lt;/p&gt;

&lt;p&gt;Of course instead of manually adding the cron tab, you can add the cron job to provisioning and deployment scripts which are tied to the application. The provisioning script would install things necessary for the cron job. Suddenly it is not just a single line of crontab entry that is necessary. Now it is that line, plus making sure that cron is present, plus code to update the crontab when there are changes.&lt;/p&gt;

&lt;h1 id=&quot;a-new-solution&quot;&gt;A new solution&lt;/h1&gt;

&lt;p&gt;Fast forward to 2018. You are making a web app again. This time using Elixir. Again you need to periodically execute a command to delete temporary files. Instead of using cron, you use Elixir. With Elixir it is easy to add extra processes that can run code when you want. A &lt;a href=&quot;https://stackoverflow.com/questions/32085258/how-can-i-schedule-code-to-run-every-few-hours-in-elixir-or-phoenix-framework/38778117&quot;&gt;very simple GenServer&lt;/a&gt; is all it takes to periodically run a command. If you prefer, there are libraries such as &lt;a href=&quot;https://github.com/quantum-elixir/quantum-core&quot;&gt;Quantum&lt;/a&gt; or &lt;a href=&quot;https://github.com/SchedEx/SchedEx&quot;&gt;SchedEx&lt;/a&gt;, that use the same kind of syntax as cron.&lt;/p&gt;

&lt;p&gt;A single line of code can add it to the supervision tree of the application. This means that when the application runs - the code is executed. If something goes wrong, there are error messages. The code to schedule is no longer outside the code base. It no longer logs errors to a different place. It no longer requires cron to be available at runtime and the cron job to be set up and configured.&lt;/p&gt;

&lt;p&gt;As with other uses of supervised processes in Elixir, you can trust that if the application is up, then the code is executed. If anything goes wrong there are errors that can be monitored in the same way as other errors in the system.&lt;/p&gt;

&lt;h1 id=&quot;comparing-apples-to-oranges&quot;&gt;Comparing apples to oranges&lt;/h1&gt;

&lt;p&gt;What at first seems like “just one line in the crontab” is not the equivalent of adding a line to the Elixir source code. If provisioning is not already there for setting up the crontab and maintaining changes, that has to be added. This is just in order to make sure that the cron jobs are available and up to date.&lt;/p&gt;

&lt;p&gt;When looking at the system as a whole the cron jobs are a part of what is necessary. If you already have procedures for developing, versioning and deploying code, you probably want the same for cron jobs. Going from not using cron to using cron is more than just manually logging on to a production server and running &lt;code class=&quot;highlighter-rouge&quot;&gt;crontab -e&lt;/code&gt; if you want to have the same maintanability, version history and deployment process as your existing code.&lt;/p&gt;

&lt;h1 id=&quot;new-possibilities&quot;&gt;New possibilities&lt;/h1&gt;

&lt;p&gt;Languages running on the BEAM (Erlang, &lt;a href=&quot;https://elixir-lang.org&quot;&gt;Elixir&lt;/a&gt;, LFE etc.) add new possibilities compared to less concurrent languages that many developers have been using before. Suddenly things that required a dependency can now be done in the language itself. In fact in some cases, such as RabbitMQ, those dependencies were written in Erlang to begin with.&lt;/p&gt;

&lt;p&gt;This means possibilities to reduce dependencies, simplify development, deployment, provisioning and monitoring.&lt;/p&gt;
</description>
        <pubDate>Tue, 04 Sep 2018 07:00:00 -0500</pubDate>
        <link>http://www.creativedeletion.com/2018/09/04/using-elixir-instead-of-cron.html</link>
        <guid isPermaLink="true">http://www.creativedeletion.com/2018/09/04/using-elixir-instead-of-cron.html</guid>
        
        
      </item>
    
      <item>
        <title>ElixirConf 2016 talk in Orlando (video): The New Calendar Types in Elixir 1.3</title>
        <description>&lt;p&gt;Elixir &amp;amp; Phoenix Conf 2016 took place in Orlando, Florida in September. I gave a talk about the new date and time types in Elixir 1.3. It was recorded and the video is available:&lt;/p&gt;

&lt;iframe width=&quot;720&quot; height=&quot;405&quot; src=&quot;https://www.youtube.com/embed/3gky54_qLjQ&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/lau/the-new-calendar-types-in-elixir-1-dot-3&quot;&gt;The slides are available here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If this subject interests you, also check out &lt;a href=&quot;/2015/10/19/elixirconf-talk-date-time.html&quot;&gt;my talk from ElixirConf 2015&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Sat, 12 Nov 2016 06:00:00 -0600</pubDate>
        <link>http://www.creativedeletion.com/2016/11/12/elixirconf-2016-date-time.html</link>
        <guid isPermaLink="true">http://www.creativedeletion.com/2016/11/12/elixirconf-2016-date-time.html</guid>
        
        
      </item>
    
      <item>
        <title>What everyone except programmers knows about dates</title>
        <description>&lt;p&gt;Ask a schoolchild to write down a date. They will likely write a month, day of the month and maybe a year too (not necessarily in that order). So will most
other literate people at any age.&lt;/p&gt;

&lt;p&gt;Ask a programmer to write a date and they might write not just a date, but also add hours, minutes and seconds to it!&lt;/p&gt;

&lt;p&gt;But &lt;b&gt;a date does not have hours, minutes and seconds&lt;/b&gt;. Most people know this. Except many programmers. Well
they probably know, but many use the word &lt;em&gt;date&lt;/em&gt; to mean a combination of date and point of time in hours and minutes (and more detailed than that).&lt;/p&gt;

&lt;h2 id=&quot;why-it-is-like-this&quot;&gt;Why it is like this&lt;/h2&gt;

&lt;p&gt;Certain systems and programming languages have a simplistic structure to handle all kinds of time and date:
&lt;a href=&quot;http://www.creativedeletion.com/2016/02/04/timetypes_prevent_bugs.html&quot;&gt;One type to rule them all&lt;/a&gt;.
This is a bad idea, but it is very prevalent. For instance typing &lt;code class=&quot;highlighter-rouge&quot;&gt;date&lt;/code&gt; in Linux gives you not just a date,
but also the time of day. In Java (before version 8) and Javascript the &lt;code class=&quot;highlighter-rouge&quot;&gt;Date&lt;/code&gt; structure is really a datetime with certain
timezone related information added on.&lt;/p&gt;

&lt;h2 id=&quot;hijacking&quot;&gt;Hijacking&lt;/h2&gt;

&lt;p&gt;Handling date and time in a computer context has enough challenges by itself: uneven months, leap years, time zones,
DST, updates to time zones and so on. Hijacking and changing the meaning of the word “date” does not help.&lt;/p&gt;

&lt;p&gt;Because if “date” in certain contexts implicitly means “datetime - maybe with a specified offset from UTC”, what word
do you use to describe a simple date?&lt;/p&gt;

&lt;h2 id=&quot;those-that-do-it-better&quot;&gt;Those that do it better&lt;/h2&gt;

&lt;p&gt;SQL databases have their share of problems when it comes to handling date and time. Especially when it comes to
time zones. But at least MySQL has pretty good names for these three types:&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;DATE&lt;/td&gt;
      &lt;td&gt;year, month, day&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;TIME&lt;/td&gt;
      &lt;td&gt;hour, minute, second&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DATETIME&lt;/td&gt;
      &lt;td&gt;year, month, date, hour, minute, second&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color: #666&quot;&gt;(Note: this is not a recommendation of MySQL.)&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-to-solve-this-problem&quot;&gt;How to solve this problem&lt;/h2&gt;

&lt;p&gt;This issue is just one of many issues with date and time in a software context.
But nonetheless I think it is important. And why not tackle each of the issues one step at the time?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Be concious of the difference between what a date is in the real world and the badly named
structures used in certain languages and libraries.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Remember a date has no hours, minutes or seconds.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you want to talk about a datetime, call it a datetime not a date.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you are using a language with a &lt;code class=&quot;highlighter-rouge&quot;&gt;Date&lt;/code&gt; class, that is really a datetime, some times you need to talk about the Date class. In that case be explicit about calling it e.g. a “Java Date object” and not just a “date”.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It is hard to change existing languages and libraries, but if you design a new programming language or date/time
related library please call the concepts by their right name. A date is a just a date.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you talk to someone involved in a software project and they call a datetime a “date”, make it clear what you are talking about.
Maybe even send them a link to this blog post so that you are all on the same page.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 29 Apr 2016 07:00:00 -0500</pubDate>
        <link>http://www.creativedeletion.com/2016/04/29/programmers-know-dates.html</link>
        <guid isPermaLink="true">http://www.creativedeletion.com/2016/04/29/programmers-know-dates.html</guid>
        
        
      </item>
    
  </channel>
</rss>
