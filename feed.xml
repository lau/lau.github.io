<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Creative Deletion</title>
    <description>Lau Taarnskov&#39;s blog on tech
</description>
    <link>http://www.creativedeletion.com/</link>
    <atom:link href="http://www.creativedeletion.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 08 Mar 2016 11:24:10 -0300</pubDate>
    <lastBuildDate>Tue, 08 Mar 2016 11:24:10 -0300</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>Compare date and time in Elixir with protocols</title>
        <description>&lt;p&gt;The &lt;a href=&quot;https://github.com/lau/calendar&quot;&gt;Calendar&lt;/a&gt; library has functionality for comparing dates and datetimes.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;Calendar.Date&lt;/code&gt; module has a function for getting the difference
between two dates. You can for instance pass date tuples
or Calendar structs to the &lt;code class=&quot;highlighter-rouge&quot;&gt;Calendar.Date.diff/2&lt;/code&gt; funciton. This will return the difference in days
between the two dates.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;m&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;day:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;month:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;year:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;m&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/elixir-lang/ecto&quot;&gt;Ecto&lt;/a&gt; is another library that has structs for dates and datetimes.&lt;/p&gt;

&lt;p&gt;To get an Ecto date struct you can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;Ecto.Date.from_erl&lt;/code&gt; function like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ecto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_erl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#Ecto.Date&amp;lt;2016-03-10&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What if you could use the same function in the calendar library to compare
&lt;code class=&quot;highlighter-rouge&quot;&gt;Ecto.Date&lt;/code&gt; structs? You can!&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/lau/calecto&quot;&gt;Calecto&lt;/a&gt; library contains a protocol implementation that makes this possible.
It looks like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;k&quot;&gt;defimpl&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ContainsDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;for:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ecto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date_struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_erl!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This means that if you have added Calecto to your Elixir project, you can pass Ecto.Date structs to
the same function:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ecto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_erl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;m&quot;&gt;6&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In the above example an Ecto.Date struct is compared to a tuple.
Whatever implements the &lt;code class=&quot;highlighter-rouge&quot;&gt;ContainsDate&lt;/code&gt; protocol can be used as parameters.&lt;/p&gt;

&lt;p&gt;We can also compare two Ecto.Date structs:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ecto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_erl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Ecto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_erl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt;
&lt;span class=&quot;m&quot;&gt;38&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;all-the-other-functions&quot;&gt;All the other functions&lt;/h2&gt;

&lt;p&gt;But that is not all. &lt;code class=&quot;highlighter-rouge&quot;&gt;diff/2&lt;/code&gt; is just one of the functions in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Calendar.Date&lt;/code&gt; module.
Any place where a date is expected you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;Ecto.Date&lt;/code&gt; structs, &lt;code class=&quot;highlighter-rouge&quot;&gt;Calendar.Date&lt;/code&gt; structs
or tuples as you please. In addition to that you can implement the &lt;code class=&quot;highlighter-rouge&quot;&gt;Calendar.ContainsDate&lt;/code&gt; for your own custom
date types.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# what day of the week it is:&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ecto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_erl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;day_of_week_name&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Thursday&quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# ISO 8601 basic format&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ecto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_erl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iso8601_basic&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;20160310&quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Format as ordinal date&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Ecto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_erl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ordinal&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;2016-070&quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Is it on a tuesday?&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ecto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_erl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tuesday?&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Get an infinite Stream of all Dates after the Ecto.Date&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ecto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_erl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;days_after&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#Function&amp;lt;32.16851754/2 in Stream.unfold/2&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Add 10 days to the Date&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ecto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_erl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;day:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;month:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;year:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Subtract a day&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ecto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_erl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subtract!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;day:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;month:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;year:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Format with strftime&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ecto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_erl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Strftime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strftime!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;The year is %Y&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;The year is 2016&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Those are just a few examples of the available functionality.&lt;/p&gt;

&lt;h2 id=&quot;comparing-ectodatetime-structs&quot;&gt;Comparing Ecto.DateTime structs&lt;/h2&gt;

&lt;p&gt;Because &lt;code class=&quot;highlighter-rouge&quot;&gt;Ecto.DateTime&lt;/code&gt; structs have datetimes, but no timezone information
they are equivalent to Calendars &lt;code class=&quot;highlighter-rouge&quot;&gt;NaiveDateTime&lt;/code&gt; structs.&lt;/p&gt;

&lt;p&gt;Like &lt;code class=&quot;highlighter-rouge&quot;&gt;Calendar.Date&lt;/code&gt; functions take arguments that implement the &lt;code class=&quot;highlighter-rouge&quot;&gt;Calendar.ContainsDate&lt;/code&gt;
protocol, &lt;code class=&quot;highlighter-rouge&quot;&gt;Calendar.NaiveDateTime&lt;/code&gt; functions take arguments that implement the
&lt;code class=&quot;highlighter-rouge&quot;&gt;Calendar.ContainsNaiveDateTime&lt;/code&gt; protocol. Out of the box Calendar has implemented
these protocols for &lt;code class=&quot;highlighter-rouge&quot;&gt;Calendar.NaiveDateTime&lt;/code&gt; structs and erlang style tuples.&lt;/p&gt;

&lt;p&gt;Calecto implements the protocol for &lt;code class=&quot;highlighter-rouge&quot;&gt;Ecto.DateTime&lt;/code&gt; structs.
This means we can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;Calendar.NaiveDateTime.diff/2&lt;/code&gt; function to compare
&lt;code class=&quot;highlighter-rouge&quot;&gt;Ecto.DateTime&lt;/code&gt; structs too.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ecto_dt1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ecto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_erl&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#Ecto.DateTime&amp;lt;2016-01-01 00:00:00&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ecto_dt2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ecto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_erl&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#Ecto.DateTime&amp;lt;2016-01-01 00:10:03&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;NaiveDateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ecto_dt1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ecto_dt2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;603&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:before&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The difference between the two structs is 603 seconds and 0 microseconds.
You can pattern match on the fourth tuple element to get &lt;code class=&quot;highlighter-rouge&quot;&gt;:before&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;:after&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;:same_time&lt;/code&gt;.
Alternatively if you do not want to know how big the difference is, but just want
to know if the first datetime is before the second one or not, there is a function for that:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;NaiveDateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;before?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ecto_dt1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ecto_dt2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ecto_dt1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;NaiveDateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;after?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ecto_dt2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And as with the &lt;code class=&quot;highlighter-rouge&quot;&gt;Date&lt;/code&gt; module you can also use &lt;code class=&quot;highlighter-rouge&quot;&gt;Ecto.DateTime&lt;/code&gt;s in the other functions
in the &lt;code class=&quot;highlighter-rouge&quot;&gt;NaiveDateTime&lt;/code&gt; module:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Add 10 seconds&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ecto_dt1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;NaiveDateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;NaiveDateTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;day:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;hour:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;min:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;month:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;sec:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;usec:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;year:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Subtract 3600 seconds&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ecto_dt1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;NaiveDateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subtract!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3600&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;NaiveDateTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;day:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;hour:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;min:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;month:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;sec:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;usec:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;year:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2015&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Format as ISO 8601 basic&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ecto_dt1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;NaiveDateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iso8601_basic&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;20160101T000000&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;comparing-just-the-date-part-of-a-datetime&quot;&gt;Comparing just the date part of a datetime&lt;/h2&gt;

&lt;p&gt;Because &lt;code class=&quot;highlighter-rouge&quot;&gt;Ecto.Datetime&lt;/code&gt; contains a date - the
&lt;code class=&quot;highlighter-rouge&quot;&gt;ContainsDate&lt;/code&gt; protocol is also implemented for &lt;code class=&quot;highlighter-rouge&quot;&gt;Ecto.Datetime&lt;/code&gt;. As with a simple date we can also use
the functions in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Calendar.Date&lt;/code&gt; module with an &lt;code class=&quot;highlighter-rouge&quot;&gt;Ecto.DateTime&lt;/code&gt; as an argument.&lt;/p&gt;

&lt;p&gt;What if you have two datetimes and you want to know if they are on the same date - not
if they are on the exact same time, just if they are on the same date. There is not a special
function for that made for date-times. Instead we can simply use the same function as before:
&lt;code class=&quot;highlighter-rouge&quot;&gt;Date.diff/2&lt;/code&gt;. When passing datetimes, the protocols simply discards the time date and just
use the date part of the date-time:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ecto_dt1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ecto_dt2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;same_date?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ecto_dt1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ecto_dt2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ecto_dt1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;day_of_week_name&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Friday&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ecto_dt1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;week_number&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2015&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;53&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;how-to-get-all-of-this-goodness&quot;&gt;How to get all of this goodness&lt;/h2&gt;

&lt;p&gt;Just add &lt;a href=&quot;https://github.com/lau/calendar&quot;&gt;Calendar&lt;/a&gt; (and &lt;a href=&quot;https://github.com/lau/calecto&quot;&gt;Calecto&lt;/a&gt; if you use Ecto) to your mix file. Then you can start using the features
of Calendar without changing anything else in your existing code.&lt;/p&gt;

&lt;h2 id=&quot;the-whole-way&quot;&gt;The whole way&lt;/h2&gt;

&lt;p&gt;So far we have seen how the protocols effortlessly allow using date and time types
from Ecto with Calendar modules.&lt;/p&gt;

&lt;p&gt;If you go a bit further and use Calecto types e.g.
&lt;code class=&quot;highlighter-rouge&quot;&gt;Calecto.DateTimeUTC&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;Ecto.DateTime&lt;/code&gt;, you get more functionality,
&lt;a href=&quot;http://www.creativedeletion.com/2016/02/04/timetypes_prevent_bugs.html&quot;&gt;convenience&lt;/a&gt; and &lt;a href=&quot;http://www.creativedeletion.com/2015/03/19/persisting_future_datetimes.html&quot;&gt;protection from bugs&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;protocols&quot;&gt;Protocols&lt;/h2&gt;

&lt;p&gt;With Elixir protocols it is possible to build functionality once in one library and then use it
with data from other libraries without changing a single line of code in either!
All you have to do is implement the necessary protocols. In this example those libraries
are Calendar and Ecto. And Calecto provides the protocol implementation.&lt;/p&gt;

&lt;p&gt;Even within one library the protocols provide a clean way of making one function usable
with different data-types.&lt;/p&gt;

</description>
        <pubDate>Mon, 07 Mar 2016 09:00:00 -0300</pubDate>
        <link>http://www.creativedeletion.com/2016/03/07/comparing_dates_in_elixir.html</link>
        <guid isPermaLink="true">http://www.creativedeletion.com/2016/03/07/comparing_dates_in_elixir.html</guid>
        
        
      </item>
    
      <item>
        <title>How more time types prevent bugs and add clarity</title>
        <description>&lt;p&gt;Using a single type to represent dates, times, datetimes with and without
timezones can be confusing for developers. It makes the code less clear and
harder to understand.&lt;/p&gt;

&lt;p&gt;Furthermore, functions to do operations on these time representations, cannot
know what information is fake, generated data versus meaningful data.
This means that the functionality can be limited and have a higher risk of
being incorrect.&lt;/p&gt;

&lt;p&gt;On the other hand having more types that match the real life concepts, make it easier
for both programmers to model and understand the programs. At the same
time making it easier for the libraries to help programmers.&lt;/p&gt;

&lt;h2 id=&quot;types-in-databases&quot;&gt;Types in databases&lt;/h2&gt;

&lt;p&gt;In common databases, there are some types for dates that make a good deal of sense.
You have &lt;code class=&quot;highlighter-rouge&quot;&gt;time&lt;/code&gt; e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;10:15:58&lt;/code&gt;. That is all the information
the time has. You have a &lt;code class=&quot;highlighter-rouge&quot;&gt;date&lt;/code&gt; e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;2016-01-17&lt;/code&gt;. And then you have &lt;code class=&quot;highlighter-rouge&quot;&gt;datetime&lt;/code&gt;s, which is…
surprise: a date and a time. E.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;2016-01-17 10:15:58&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So far so good. Then there is the JavaScript way of handling time and date.
In JavaScript there is just one type. It is called &lt;code class=&quot;highlighter-rouge&quot;&gt;Date&lt;/code&gt;.
Now you might think that a JavaScript Date would represent, well, a date.
But actually in JavaScript a Date is a datetime. And it throws in some timezone
information for good measure. So a &lt;code class=&quot;highlighter-rouge&quot;&gt;Date&lt;/code&gt; is not a date. Think about that for a second.&lt;/p&gt;

&lt;p&gt;But the confusing naming is not the biggest problem. The problem is that
programmers are encuraged to use this one-size-fits-all type to store not just
datetimes with timezones. Also for datetimes without timezones, dates without
time and timezone and time without dates and timezones.&lt;/p&gt;

&lt;h2 id=&quot;understanding-the-data-in-a-program&quot;&gt;Understanding the data in a program&lt;/h2&gt;

&lt;p&gt;When a programmer reads code, it should not be unnecessarily hard to understand
what is going on.&lt;/p&gt;

&lt;p&gt;Imagine that you want to keep track of the date when people were born.
We get a date as a string in ISO format.
This data will be saved in a database.
You use JavaScript’s Date.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2016-1-17&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Sun&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Jan&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2016&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GMT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0100&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This gets you not just a Date, but a certain millisecond in time. Midnight at that
date. And it adds a timezone too.&lt;/p&gt;

&lt;p&gt;But what if the intention was to store just the date, and not the time of day (00:00:00.000)?
What if you store that information in the database. How do you know if that is supposed
to represent midnight at that date, or just the date? What about the timezone offset?
Was that intended by the programmer or is it just something added as by JavaScript?&lt;/p&gt;

&lt;p&gt;Do you manually look at a sample of the data and decide that the ones you looked
at were at midnight, and then decided that the time part is probably just something
that was added automatically by the JavaScript Date functionality?&lt;/p&gt;

&lt;p&gt;The programmer that comes back to read their own code or someone elses code
does not know if the data is supposed to be a datetime within a certain timezone
or if either of these parts were just added as fake “filler” by Javscript’s &lt;code class=&quot;highlighter-rouge&quot;&gt;Date&lt;/code&gt;:
the date, the time of day, the timezone.&lt;/p&gt;

&lt;p&gt;Looking at the type and the data, it looks like it is a datetime, even though
the programmer just needs to represent a simple date.&lt;/p&gt;

&lt;h2 id=&quot;the-libraries-understanding-of-what-it-is-supposed-to-mean&quot;&gt;The libraries’ understanding of what it is supposed to mean&lt;/h2&gt;

&lt;p&gt;The programmer is not the only one who is limited by the one-size-fits-all Date(time).
Imagine having to represent the date as a string. You might use a library that can
format the JavaScript “Date”. Since the Date has both a datetime and timezone, it
could print an RFC3339 string like so:
&lt;code class=&quot;highlighter-rouge&quot;&gt;2016-01-16T23:00:00Z&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In this case the function prints the datetime in RFC3339 as UTC. But hold on, the
date is now the 16th of January instead of the 17th! All we originally wanted to
store was the 17th of January 2016, but the type also includes time and a timezone.
Because of the timezone, that same time in UTC is the day before at 11pm.&lt;/p&gt;

&lt;p&gt;If we had a type available representing a simple date (year, month, day), and had
used that, the library could be designed to refuse to print an RFC3339 string on
the basis that it needs to know the time and timezone.&lt;/p&gt;

&lt;p&gt;By using a type that includes extra, fake, filler data
(the time of day and timezone), we open ourselves up for
bugs. Like with security, where there are &lt;a href=&quot;https://en.wikipedia.org/wiki/Attack_surface&quot;&gt;attack surfaces&lt;/a&gt;,
the extra data becomes a “bug surface”.&lt;/p&gt;

&lt;h2 id=&quot;making-the-intention-clear&quot;&gt;Making the intention clear&lt;/h2&gt;

&lt;p&gt;The types are like a vocabulary, and by limiting programmers to just one word for
date, time, datetime with timezone, datetime without timezone, it is harder
to communicate clearly.&lt;/p&gt;

&lt;h2 id=&quot;alternatives&quot;&gt;Alternatives&lt;/h2&gt;

&lt;p&gt;In Java (not JavaScript), the built in type was also called &lt;code class=&quot;highlighter-rouge&quot;&gt;Date&lt;/code&gt;.
But for a lot of people, that built in library was not suitable. An
alternavy library was made: &lt;a href=&quot;http://www.joda.org/joda-time/&quot;&gt;Joda Time&lt;/a&gt;.
This became the defacto standard library for date and time in Java.&lt;/p&gt;

&lt;p&gt;Joda Time has a seperate type to store just a date without time and a separate type
for just a time without a date and so on. Here are some of the key types:
&lt;code class=&quot;highlighter-rouge&quot;&gt;LocalDate, LocalTime, Instant, DateTime, DateTimeZone&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-elixir-calendar-handles-it&quot;&gt;How Elixir Calendar handles it&lt;/h2&gt;

&lt;p&gt;Another example is the &lt;a href=&quot;https://github.com/lau/calendar&quot;&gt;Calendar library&lt;/a&gt; for &lt;a href=&quot;http://www.elixir-lang.org/&quot;&gt;Elixir&lt;/a&gt;. Like Joda Time it does not have the one-size-fits-all Date type
that JavaScript does. Instead it has seperate types for a &lt;code class=&quot;highlighter-rouge&quot;&gt;DateTime&lt;/code&gt; in a specific timezone
at a specific point in time, for a &lt;code class=&quot;highlighter-rouge&quot;&gt;NaiveDateTime&lt;/code&gt; for just a date and a time
without a timezone, for just a &lt;code class=&quot;highlighter-rouge&quot;&gt;Time&lt;/code&gt; (e.g. 15:25:16),
and finally for a &lt;code class=&quot;highlighter-rouge&quot;&gt;Date&lt;/code&gt; (e.g. 2016-01-20).&lt;/p&gt;

&lt;p&gt;In Calendar there is a function to to format a datetime into an &lt;a href=&quot;http://tools.ietf.org/html/rfc3339#page-10&quot;&gt;RFC 3339&lt;/a&gt; string.
The RFC 3339 string needs to contain a datetime and a timezone offset.
A unix timestamp contains all of that. So we can parse a unix timestamp number,
and then pass the datetime on to a function that formats that.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;1453303516&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Parse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unix!&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rfc3339&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;2016-01-20T15:25:16Z&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you have a date you can parse that as a Date:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;2016-01-16&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Parse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iso8601!&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;day:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;month:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;year:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That simply gets you a date. What if we try to format that as an RFC3339 string?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;2016-01-16&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Parse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iso8601!&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rfc3339&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Protocol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;UndefinedError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ContainsDateTime&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;implemented&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;day:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;month:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;year:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We get an error, and that is great! The DateTime.Format.rfc3339 function does not
have enough information to generate an RFC3339 string so it raises an error. To
generate an RFC3339 string you need to know the date, time and UTC offset. In this
case we only had a date, so the time and UTC offset were missing.&lt;/p&gt;

&lt;h2 id=&quot;ecto-datetimes&quot;&gt;Ecto datetimes&lt;/h2&gt;

&lt;p&gt;In Ecto, an Elixir database wrapper, there are types for dates, times and datetimes.
The datetime type does not contain any data telling anything about which timezone
the datetime is in. (This is what is called a “naive” datetime in Calendar.)&lt;/p&gt;

&lt;p&gt;Ecto also has an automatic timestamps feature that add timestamps in UTC
when a record is updated or inserted. The type used for &lt;code class=&quot;highlighter-rouge&quot;&gt;inserted_at&lt;/code&gt; is the same
as any other datetime fields though. This means that for any given datetime
we do not know which timezone it belongs to.&lt;/p&gt;

&lt;p&gt;So even though the programmer can read documentation and find out that inserted_at
and updated_at timestamps are UTC, the date returned does not contain this information.&lt;/p&gt;

&lt;p&gt;There is a function for string representations of Ecto.DateTime structs as
ISO 8601. ISO 8601 datetimes allows describing the timezone. Ideally for the timestamps
&lt;code class=&quot;highlighter-rouge&quot;&gt;inserted_at&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;updated_at&lt;/code&gt;, there would be a function that format them as ISO8601 strings
and add a Z to convey that the datetimes are in UTC. But because the type is
also representing other datetimes where the timezone is unknown, we cannot
know which datetimes are inserted_at timestamps in UTC and which are not.&lt;/p&gt;

&lt;p&gt;So the only reasonable default is to opt for not saying anything about the timezone.&lt;/p&gt;

&lt;h2 id=&quot;calecto&quot;&gt;Calecto&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/lau/calecto&quot;&gt;Calecto&lt;/a&gt; is a Calendar-Ecto adapter. It knows that &lt;code class=&quot;highlighter-rouge&quot;&gt;inserted_at/updated_at&lt;/code&gt; timestamps set in Ecto 
are in UTC.
At the same time Calecto can make use of the various types in Calendar. So when using
Calecto the inserted_at field will be a &lt;code class=&quot;highlighter-rouge&quot;&gt;Calendar.DateTime&lt;/code&gt; struct that contains the information
that the timezone is in UTC. This means that we can use a formatting function 
to get a RFC3339 (which is an ISO 8601 profile) that contains the Z telling the world that this
datetime is in UTC.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inserted_at&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rfc3339&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;2016-01-20T15:25:16Z&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;On the other hand if we use a normal Ecto.DateTime type or a Calecto.NaiveDateTime
type for our field, we are saying that we do not know which timezone that
datetime is in. Therefore if we tried to use the same formatting function as above,
there would be an error message saying that we cannot create an RFC3339 string
without knowing the timezone.&lt;/p&gt;

&lt;p&gt;There is a way to overcome that though. If for some reason you have a datetime without
timezone information and know that it is in UTC, you can promote a naive datetime
to a DateTime:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;some_naive_datetime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NaiveDateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_date_time_utc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rfc3339&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;2016-01-20T15:25:16Z&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The point is that for Calendar to generate a string that says something about the
timezone, it has to get that information from somewhere. It does not “magically”
pull out a timezone assumption out of thin air. It can come from data: for example
implicitly UNIX timestamps are always in UTC. Or an explicit part of the data: RFC 3339
timestamps always contain timezone offset information.
If the timezone information is not contained in input data, programmers have to explictly tell the library about the timezone.
An example of that is the &lt;code class=&quot;highlighter-rouge&quot;&gt;NaiveDateTime.to_date_time_utc&lt;/code&gt; call. This is explicit
and not something hidden that accidentally happens.&lt;/p&gt;

&lt;h2 id=&quot;elixir-and-other-languages&quot;&gt;Elixir and other languages&lt;/h2&gt;

&lt;p&gt;For people choosing a datetime library or considering building a datetime library
this information is useful in any language. If you ever build a timezone library
look at how it is done in JavaScript to see what NOT to do.&lt;/p&gt;

&lt;p&gt;If you are using Elixir, the only
library that implements the principles in this article is the &lt;a href=&quot;https://github.com/lau/calendar&quot;&gt;Calendar library&lt;/a&gt;.
That is the only datetime library I can recommend for Elixir.&lt;/p&gt;

</description>
        <pubDate>Thu, 04 Feb 2016 09:00:00 -0300</pubDate>
        <link>http://www.creativedeletion.com/2016/02/04/timetypes_prevent_bugs.html</link>
        <guid isPermaLink="true">http://www.creativedeletion.com/2016/02/04/timetypes_prevent_bugs.html</guid>
        
        
      </item>
    
      <item>
        <title>Timezone updates need to be fixed</title>
        <description>&lt;figure class=&quot;picture right_img&quot;&gt;
  &lt;img src=&quot;http://www.creativedeletion.com/assets/plane512.jpg&quot; srcset=&quot;http://www.creativedeletion.com/assets/plane512.jpg 1x, http://www.creativedeletion.com/assets/plane1024.jpg 2x&quot; /&gt;
  &lt;figcaption&gt;Fortunately, the technology for keeping planes airborne receive more attention that the information systems for passengers.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;In October I went to ElixirConf &lt;a href=&quot;/2015/10/19/elixirconf-talk-date-time.html&quot;&gt;to talk about time and timezones&lt;/a&gt;. One of the things I talked about was keeping timezone data up to date.&lt;/p&gt;

&lt;p&gt;A good example of that showed itself soon after: On the plane going back it had one of those screens showing the local time at the destination. It was incorrect.&lt;/p&gt;

&lt;h2 id=&quot;event-reminding-software-feature-causes-area-man-to-miss-event&quot;&gt;Event reminding software feature causes area man to miss event&lt;/h2&gt;
&lt;p&gt;About a week later I was playing a 8-a-side football game. But a player had not shown up. As the game was about to end, he showed up, confused.
Why? Because of the way timezone data updates are handled. It is a broken system. The event was arranged with Facebook. Facebook’s timezone data is out of date. So Facebook told the player that the game started at 9pm instead of 8pm.&lt;/p&gt;

&lt;p&gt;A more simple approach such as the local time written on paper, sent with Fax or a text message would not have caused such as problem. But like so many other pieces of software, the Facebook code is “clever” and uses timezone conversions. Facebook thinks it knows where you are and what time it is in that location. When it works, this cleverness can be helpful. But this time it was wrong. When you write code that is clever like that, you have to make sure that the timezone information is up to date. Otherwise it does not work and people get upset.&lt;/p&gt;

&lt;h2 id=&quot;it-is-a-common-problem&quot;&gt;It is a common problem&lt;/h2&gt;

&lt;p&gt;Facebook and Boeing airplanes are not alone in having out of date timezone information. The same goes for all the major operating systems such as Windows, Linux, Mac OS X. And many phones too. And telecom providers. In my experience most systems with timezone information are often out of date.&lt;/p&gt;

&lt;p&gt;The company in the world with the largest market capitalisation (Apple) has this problem. So has number 8 (Facebook).
And they are both tech companies. I think it is an interesting phenomenon. And they are not the only
ones with that problem.&lt;/p&gt;

&lt;h2 id=&quot;it-is-important&quot;&gt;It is important&lt;/h2&gt;

&lt;p&gt;In this case the Facebook event feature failed pretty spectacularly. It reminds me of those photos
with the caption “you had one job”. Facebook events are supposed to tell people about an event and
when it takes place. It failed in this case. Because of out of date timezone data.&lt;/p&gt;

&lt;h2 id=&quot;it-is-not-super-hard-to-get-up-to-date-data&quot;&gt;It is not super hard to get up to date data&lt;/h2&gt;

&lt;p&gt;The timezone data is &lt;a href=&quot;http://www.iana.org/time-zones&quot;&gt;freely available at IANA’s website&lt;/a&gt;.
You do not have to pay for it, anyone can download it and use it.&lt;/p&gt;

&lt;h2 id=&quot;why-has-it-not-been-fixed&quot;&gt;Why has it not been fixed?&lt;/h2&gt;

&lt;p&gt;Why is it that some of the most valueable companies in the world, and tech companies at that, cannot cope with the
challenge of having up to date timezone data?&lt;/p&gt;

&lt;p&gt;Remember when people thought that it was a good idea to only save the two last digits of a year? 90 instead of 1990.
In my experience many programmers just do whatever everyone else is doing. Unless it is an area they care about.
And most programmers do not care about timezone updates. Unless they personally experience problems caused by it.&lt;/p&gt;

&lt;h2 id=&quot;what-people-do-today&quot;&gt;What people do today&lt;/h2&gt;

&lt;p&gt;Very few people seem to take responsibility for having up-to-date timezone data, having a process for it
or even caring much about it.&lt;/p&gt;

&lt;p&gt;In Linux the common way to update timezone data is using software package updates. There is a package called tzdata that
contains both the data and code at the same time. There are several problems with this. One is that it takes a while
from IANA releasing new data to someone manually make a new package version with the new data. Sometimes an update will
be release by IANA, and no packages are ever made! So even if users update their system with the newest packages the
moment they come out, they will be old.&lt;/p&gt;

&lt;p&gt;A second issue is that these
updates are viewed the same way as other software updates. Like a new version of database software. And in order to avoid
regressions, developers/sysadmins will usually have to spend precious time testing things before upgrading software.
It takes time and is seen as a barrier to upgrade software running on a server. How ever small that costs is, it is there.&lt;/p&gt;

&lt;p&gt;So the state of timezone updates today for most people is that it relies on two sets of people that have to manually
do something. If just one of them fail to do that, the result is the timezone data is out of date. And right now
the common thing is for both sets of people to not do it or do it slowly.&lt;/p&gt;

&lt;h2 id=&quot;it-is-just-updated-data-not-a-new-api-or-different-functionality&quot;&gt;It is just updated data, not a new API or different functionality&lt;/h2&gt;

&lt;p&gt;But the data itself is not new software. It is just data. Functionality should not change because of new data.
New timezone data could be seen similarly to setting the clock of the server. This is commonly done automatically.
Or it could be seen as data in a database changing. If you change software, you have to test it to see if it still
works as required. But when a system is running and data is changed in a database due to normal use, the software
is not tested every single time a row is changed, inserted or updated. That would be silly. Because the software
should be made to handle different kinds of data.&lt;/p&gt;

&lt;p&gt;It should be possible to automatically update the timezone data without having to treat it with the same ceremony as with a software update.&lt;/p&gt;

&lt;h2 id=&quot;a-solution&quot;&gt;A solution&lt;/h2&gt;

&lt;p&gt;Imagine if this problem was something that could be handled automatically by software.
It turns out that that is in fact the case! &lt;a href=&quot;https://github.com/lau/tzdata&quot;&gt;Tzdata for Elixir&lt;/a&gt; checks the IANA servers
once a day. If there is a new version of the timezone database available, it will be automatically
downloaded and updated. The future is here, but in this case only distributed to Elixir ;-)&lt;/p&gt;

&lt;h2 id=&quot;the-exception-to-the-rule-offline-embedded-systems&quot;&gt;The exception to the rule. Offline embedded systems&lt;/h2&gt;

&lt;p&gt;Not all systems are connected to the internet. In that case you cannot do to updates automatically
in the same way. But it needs to happen somehow in order to have timezone based calculations be correct.&lt;/p&gt;

&lt;p&gt;If you make a system that uses timezone data, think ahead. The timezone data is updated as often as 10 times a year or more.
In case you have an embedded system that is not connected to the internet all the time, how can that processes be
put in place to make sure it is updated?&lt;/p&gt;

&lt;h2 id=&quot;what-to-do-if-you-do-not-use-elixir&quot;&gt;What to do if you do not use Elixir&lt;/h2&gt;

&lt;p&gt;If your system is on the Internet, but rely on timezone updates that are not from Elixir, what can you do to improve the situation?
One solution would be to implement a similar automatic system that updates automatically using the Internet.&lt;/p&gt;

&lt;p&gt;Another would be for package maintainers
to have an improved process for manually releasing data just after it is released. I do not have high hopes
for this to happen, but maybe someone reading this could help maintain packages and implement a process
to make it more quick and consistent.&lt;/p&gt;

&lt;p&gt;The second part is for users of those packages to have a process for making sure the data is updated as
it become available. Someone
needs to be responsible for it and make sure the data is updated when it is available.&lt;/p&gt;

&lt;h2 id=&quot;computer-professionals-relying-on-manual-processes-for-something-that-is-perfect-for-computers&quot;&gt;Computer professionals relying on manual processes for something that is perfect for computers&lt;/h2&gt;

&lt;p&gt;Not all things are easy to automate using computers. But this is. It is funny how people
who make software to help automate things for someone else, themselves do things manually when
it comes to timezone updates. The current system does not work well. It is time to move on to an automated system.&lt;/p&gt;
</description>
        <pubDate>Thu, 03 Dec 2015 09:00:00 -0300</pubDate>
        <link>http://www.creativedeletion.com/2015/12/03/timezone-updates-need-fixing.html</link>
        <guid isPermaLink="true">http://www.creativedeletion.com/2015/12/03/timezone-updates-need-fixing.html</guid>
        
        
      </item>
    
      <item>
        <title>Date/time talk at ElixirConf 2015 in Austin (video)</title>
        <description>&lt;p&gt;ElixirConf 2015 took place in Austin, Texas this month. I gave a talk about date and time. It was recorded and the video is now available:&lt;/p&gt;

&lt;iframe width=&quot;720&quot; height=&quot;405&quot; src=&quot;https://www.youtube.com/embed/keUbVvMJeKY&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Afterwards some people asked about the &lt;a href=&quot;https://github.com/lau/calendar&quot;&gt;Calendar&lt;/a&gt; library, which is featured in the video.
It is the one I made to cope with the problems explained in the talk and the only library
of its kind I would recommend to use in Elixir. The website for it is
available at &lt;a href=&quot;https://github.com/lau/calendar&quot;&gt;https://github.com/lau/calendar&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If this subject interests you, here is a number of related blog posts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/2015/05/10/the-need-timezones.html&quot;&gt;The need for timezone awareness&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2015/01/28/falsehoods-programmers-date-time-zones.html&quot;&gt;Falsehoods programmers believe about time and time zones&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2015/08/07/why-not-to-use-server-local-time.html&quot;&gt;Why not to ask the server for its “local time”&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2015/03/19/persisting_future_datetimes.html&quot;&gt;How to save datetimes for future events - (when UTC is not the right answer)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 19 Oct 2015 09:00:00 -0300</pubDate>
        <link>http://www.creativedeletion.com/2015/10/19/elixirconf-talk-date-time.html</link>
        <guid isPermaLink="true">http://www.creativedeletion.com/2015/10/19/elixirconf-talk-date-time.html</guid>
        
        
      </item>
    
      <item>
        <title>Why not to ask the server for its &quot;local time&quot;</title>
        <description>&lt;p&gt;There are many horror storries of wasted time and money, hard to find bugs and
“but it works on my machine”-type situations that could have been avoided if
the programmers simply stopped asking the server for its “local time”.&lt;/p&gt;

&lt;p&gt;A local time setting might have made sense back when a server was the
size of room and was not connected to the internet.
Today… not so much.&lt;/p&gt;

&lt;p&gt;A neat thing about the Internet is that you can run web apps on servers
all around the globe. You can cheaply buy a virtual server located
in for instance Germany or England and they will generally work the
same. Developers might write a webapp and deploy it to either of those
virtual servers and the software would work the same way. The server
never sees daylight from inside the data center and does not care what
timezone it is in. It does not really matter.&lt;/p&gt;

&lt;p&gt;Problems can arise though, if a server has its timezone set to something
other than UTC and the software running on it asks for “local time”. Daylight
Saving Time (DST) causes skipped and repeated hours. So a scheduled task might
be started twice or not at all if the software refers to “local server time”.&lt;/p&gt;

&lt;h2 id=&quot;going-to-work-at-midnight-to-shut-down-the-software-and-servers&quot;&gt;Going to work at midnight to shut down the software and servers&lt;/h2&gt;

&lt;p&gt;There are people that every autumn are called in for special “going off of DST
duty”, where they shut down software and servers in order to avoid problems
during the change from DST to standard time. While they normally would go home
in the evening and sleep at night, on this date they will be awake during the
early morning. They shut down certain pieces of software that are relied on by
businesses and governments.&lt;/p&gt;

&lt;p&gt;Because they are afraid that Bad Things will
happen when the hour between 2:00 and 3:00 repeats itself. If a job is set to
start every day at 2:30 it will likely be triggered to be started twice in one
hour. So they safely shut down the software beforehand and shut down the servers,
wait at least an hour before they can start the servers up again.&lt;/p&gt;

&lt;p&gt;This is not a made up story. I know of a big company that does this, and I
doubt it is the only one.&lt;/p&gt;

&lt;p&gt;I commend the system administrators for doing this in order to avoid
problems. But it did not have to be like that if the software was made to
be resistant to these kinds of problems.&lt;/p&gt;

&lt;h2 id=&quot;a-local-time-zone-makes-sense-on-a-personal-computer&quot;&gt;A local time zone makes sense on a personal computer&lt;/h2&gt;

&lt;p&gt;My laptop has its timezone set to whereever I happen to be. This makes sense
because then it can show me what the time is in my local timezone. And other
times such as when a file was created are also shown in that timezone.&lt;/p&gt;

&lt;p&gt;On a server though, things are different. The users of the system are not
necessarily in the same timezone as the server. And why would
they care about the timezone where the server is as long as latency is good
enough?
It does not make much sense to set a “local” timezone for the server.&lt;/p&gt;

&lt;h2 id=&quot;the-local-time-setting-is-a-mutable-global-variable&quot;&gt;The local time setting is a mutable global variable&lt;/h2&gt;

&lt;p&gt;A local time setting is a global variable that can change. In general &lt;a href=&quot;http://c2.com/cgi/wiki?GlobalVariablesAreBad&quot;&gt;global
variables are bad&lt;/a&gt;. So by default you want to avoid them unless there is a
really, really good reason for them.&lt;/p&gt;

&lt;h2 id=&quot;what-to-do-instead&quot;&gt;What to do instead&lt;/h2&gt;

&lt;p&gt;Whenever you write software and ask the server what time it is right now,
&lt;strong&gt;do not ask a server for its “local time”. Instead ask for the time in UTC.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you write software that is not run on servers exclusively controlled by you,
somebody can change the local time setting to something
other than UTC. But even if you only run the software on your
own server and have the good policy of setting their timezone
to UTC, why not just have your software ask for UTC in the
first place instead of relying on the local time setting?&lt;/p&gt;

&lt;h2 id=&quot;getting-the-time-right-now-for-another-timezone&quot;&gt;Getting the time right now for another timezone&lt;/h2&gt;

&lt;p&gt;If you want to know the time right now for another timezone,
you can get the time right now from the server in UTC. Then
convert it to another timezone. &lt;a href=&quot;https://github.com/lau/calendar&quot;&gt;Calendar&lt;/a&gt;,
the Elixir datetime library
I designed, has a function that does this for you. For instance to
get the time right now in Copenhagen you can call
&lt;code class=&quot;highlighter-rouge&quot;&gt;Calendar.DateTime.now!(&quot;Europe/Copenhagen&quot;)&lt;/code&gt;. Behind the scenes
it gets the time right now in UTC and then shifts it to the Copenhagen
timezone. The important thing is that we do not rely on the local time
setting of the server. Instead the code gets the timezone identifier from
somewhere - it could be the webbrowser of a user or a database or a config file.&lt;/p&gt;

&lt;p&gt;There is an important difference between asking for a default unspecified local time
based on a global variable and instead providing an identifier
for a specific timezone in order to get the time right now for that timezone.&lt;/p&gt;

&lt;p&gt;When dealing with the daily lives of most people, &lt;a href=&quot;/2015/03/19/persisting_future_datetimes.html&quot;&gt;the time in their various timezones
are important&lt;/a&gt;. But for internal operations on a server, that are not directly related
to those timezones, it makes more sense to use UTC. For instance timestamps
of files or timestamps of when a database record was created.&lt;/p&gt;

&lt;h2 id=&quot;defaults-stacked-against-programmers&quot;&gt;Defaults stacked against programmers&lt;/h2&gt;

&lt;p&gt;Unfortunately “local time” is sometimes the default in standard libraries.
This is the case with Erlang’s &lt;code class=&quot;highlighter-rouge&quot;&gt;file:read_file_info&lt;/code&gt; that provides information
about when a file was last changed. But by default it returns the time
in local time. So if you want to compare and see how long it has been
since the last file change, you have to get the local
time of the server. But the calculation will be wrong when affected by DST.&lt;/p&gt;

&lt;p&gt;From the &lt;a href=&quot;http://www.erlang.org/doc/man/file.html#read_file_info-1&quot;&gt;file module part of the Erlang manual&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;The time type returned in atime, mtime and ctime is dependent on the time type set in Opts :: {time, Type}. Type local will return local time, universal will return universal time and posix will return seconds since or before unix time epoch which is 1970-01-01 00:00 UTC. Default is {time, local}.&quot;&lt;/blockquote&gt;

&lt;p&gt;For this Erlang example you have to pass an extra argument in order to
get the timestamps as UTC. Hopefully in the future library designers
will choose UTC to be the default for these kinds of things.
But for now instead of: &lt;code class=&quot;highlighter-rouge&quot;&gt;file:read_file_info(&#39;example.txt&#39;)&lt;/code&gt; you have to use &lt;code class=&quot;highlighter-rouge&quot;&gt;file:read_file_info(&#39;example.txt&#39;, [{time, universal}])&lt;/code&gt; Then you have a UTC timestamp
that you can compare with the time right now in UTC: &lt;code class=&quot;highlighter-rouge&quot;&gt;calendar:universal_time()&lt;/code&gt;
instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;calendar:local_time()&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;it-is-worth-it&quot;&gt;It is worth it&lt;/h2&gt;

&lt;p&gt;I encourage developers to avoid asking the server for its “local time” even if it takes passing an extra argument
in some places.
 This practice is not a panacea for
all time related problems, but it can eliminate some very nasty bugs. And its widespread
use would mean less sysadmins
would need to be awake to shut down servers
before DST events.&lt;/p&gt;

</description>
        <pubDate>Fri, 07 Aug 2015 09:00:00 -0300</pubDate>
        <link>http://www.creativedeletion.com/2015/08/07/why-not-to-use-server-local-time.html</link>
        <guid isPermaLink="true">http://www.creativedeletion.com/2015/08/07/why-not-to-use-server-local-time.html</guid>
        
        
      </item>
    
      <item>
        <title>The need for timezone awareness</title>
        <description>&lt;p&gt;A good way to avoid some of the &lt;a href=&quot;/2015/01/28/falsehoods-programmers-date-time-zones.html&quot;&gt;pitfalls of time in computer software&lt;/a&gt; is to be explicit about timezones and to use a library that can handle timezones.&lt;/p&gt;

&lt;p&gt;If your software is only used in a single timezone, you might think that timezones are not necessary to think about. But being aware of the timezone is necessary in more situations than what most people assume.&lt;/p&gt;

&lt;p&gt;If both of these statements are true you probably need to use a timezone aware date-time library:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You need to validate a datetime that is not UTC&lt;/li&gt;
  &lt;li&gt;That non-UTC datetime is from a location that observes Daylight Saving Time (DST). For instance most of Europe and North America.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you make software that only operates in a single timezone do you really need
a timezone library? Most likely. If that timezone observes Daylight Saving Time
it is very hard to validate any given point in time without it. &lt;strong&gt;To validate a datetime for a place that observes DST your code has to take DST into account.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The timezone aware datetime library is not just there to compare one timezone to
another. It also knows about when DST happens in any timezone.&lt;/p&gt;

&lt;p&gt;The following happens in countries that observe DST:
In the spring, an hour (usually) is skipped when the clocks are set forward. That hour
simply does not exist in “wall time”. So if your end users work with their
local time and you want to make sure if the time they entered is valid,
it is not enough to simply check if it is between 00:00:00 and 23:59:59.&lt;/p&gt;

&lt;p&gt;02:30:00 on March 30th 2014 might be a valid time, but in some timezones it is not.
With a timezone aware timezone library you can validate that.&lt;/p&gt;

&lt;p&gt;Here is an example of doing that in &lt;a href=&quot;https://github.com/lau/calendar&quot;&gt;Calendar&lt;/a&gt;, an Elixir date time library I designed. A “wall time” can be valid in one timezone but not in another:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;no&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_erl&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2014&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}},&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Europe/London&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;day:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;hour:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;min:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;timezone:&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Europe/London&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_erl&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2014&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}},&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Europe/Copenhagen&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:invalid_datetime_for_timezone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Furthermore if the entered date and time is during a switch off of DST - usually in the autumn -
the time will be ambiguous. So if you need to compare the entered datetime to other
datetimes, you need to ask the user if it the entered datetime was before or after the clocks
were set back.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;no&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_erl&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2014&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}},&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Europe/Copenhagen&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ambiguous&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;AmbiguousDateTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;possible_date_times:&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[%&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;abbr:&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;CEST&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;std_off:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3600&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;abbr:&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;CET&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;std_off:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]}}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;utc-and-the-user-time-zone&quot;&gt;UTC and the user time zone&lt;/h2&gt;

&lt;p&gt;Even if all of the users of a system are in the same timezone, you probably want your server software to work with UTC. UTC does not have the ambiguity that other timezones have. If a user has entered a future datetime and wants to be alerted an hour before, you can compare the server time to the entered datetime and then issue an alert one hour before. But in order to compare UTC to the entered datetime, you need to know what the timezone is. And by timezone I do not mean simply an integer with the UTC offset on a certain date. Because UTC offsets can change. You want a timezone name from the &lt;a href=&quot;https://www.iana.org/time-zones&quot;&gt;tz database&lt;/a&gt; such as &lt;code class=&quot;highlighter-rouge&quot;&gt;America/New_York&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;measuring-the-interval-between-two-datetimes&quot;&gt;Measuring the interval between two datetimes&lt;/h2&gt;

&lt;p&gt;Imagine that a user enters two datetimes:
&lt;code class=&quot;highlighter-rouge&quot;&gt;2014 March 30, 01:00:00&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;2014 March 30, 04:00:00&lt;/code&gt;.
You need to find out how much time there is between the two.
Usually the difference would be exactly three hours. But for some timezones,
the “spring forward” event, where
the clocks are set forward one hour, took place between those two datetimes. For those zones the difference between the two
datetimes is two hours, not three. That is quite a big difference.&lt;/p&gt;

&lt;p&gt;So if your users, like most people, do not have their watch set to UTC, you would need to know which timezone the entered times belong to in order to do that calculation correctly.&lt;/p&gt;

&lt;p&gt;Again, there are timezone libraries that can handle that.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;at_four&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_erl!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({{&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2014&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},{&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}},&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Europe/Stockholm&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;at_one&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;no&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_erl!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({{&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2014&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},{&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}},&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Europe/Stockholm&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;at_four&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;at_one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;7200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 7200 seconds is two hours in this case&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In that example you do not really have to check if the timezone uses DST,
and if so when it switches back and forth from DST. All you have to do
is input the “wall time” and the timezone. The library will handle the rest.&lt;/p&gt;

&lt;h2 id=&quot;adding-another-timezone&quot;&gt;Adding another timezone&lt;/h2&gt;

&lt;p&gt;So far the examples have that timezone awareness is necessary even if you have just one user that only uses one timezone. If you suddenly need your software to be used by people in more than one timezone, it is of course easier if your software has already taken timezones into account.&lt;/p&gt;

&lt;h2 id=&quot;timezone-aware-as-the-default&quot;&gt;Timezone aware as the default&lt;/h2&gt;

&lt;p&gt;When I made &lt;a href=&quot;https://github.com/lau/calendar&quot;&gt;Calendar&lt;/a&gt;, I made sure that the
API was designed with timezone awareness as the default.&lt;/p&gt;

&lt;p&gt;If you have a datetime and do not explicitly tell the library which timezone it belongs
to, you cannot create a valid &lt;code class=&quot;highlighter-rouge&quot;&gt;DateTime&lt;/code&gt; struct.&lt;/p&gt;

&lt;p&gt;So you have to either
provide a valid timezone name or use another module called &lt;code class=&quot;highlighter-rouge&quot;&gt;NaiveDateTime&lt;/code&gt;.
Naïve - it sounds a bit less confidence inspiring than just &lt;code class=&quot;highlighter-rouge&quot;&gt;DateTime&lt;/code&gt; does it not? And it takes longer to type. That is
on purpose. My hope is that the name alone makes people
think twice before using it over &lt;code class=&quot;highlighter-rouge&quot;&gt;DateTime&lt;/code&gt;. There are a few cases where you
can get away with ignoring timezones and DST, but you really have to be
sure you know what you are doing.&lt;/p&gt;

&lt;p&gt;Working with date and time is not easy, but it is not all rocket science either. It is not a secret that DST means that hours are skipped and repeated. Programmers can ignore it and live with the consequences.
Or use a library that can handle it.&lt;/p&gt;
</description>
        <pubDate>Sun, 10 May 2015 15:10:00 -0300</pubDate>
        <link>http://www.creativedeletion.com/2015/05/10/the-need-timezones.html</link>
        <guid isPermaLink="true">http://www.creativedeletion.com/2015/05/10/the-need-timezones.html</guid>
        
        
      </item>
    
      <item>
        <title>Elixir - The next big language for the web</title>
        <description>&lt;p&gt;In this article I will explain why
I think
the &lt;a href=&quot;http://elixir-lang.org&quot;&gt;Elixir language&lt;/a&gt;
 will make a big
impact in the world of web development.&lt;/p&gt;

&lt;h2 id=&quot;from-obscurity-to-the-default-choice&quot;&gt;From obscurity to the default choice&lt;/h2&gt;

&lt;p&gt;First a short tale of another language that went from being largely
unknown to very well known:&lt;/p&gt;

&lt;p&gt;In 2003 I started using Ruby. A classmate from university was about to
release a web framework for it. You could
write software with much fewer lines of code than in Java. The combination
of Ruby and this new web framework felt so much better for web development
than what I had been using before - PHP.&lt;/p&gt;

&lt;p&gt;So when a client wanted to redo an e-commerce site, I convinced them to
rewrite it in Ruby and use this new framework that was now called Rails.
Ever since I have been programming Ruby professionally.&lt;/p&gt;

&lt;p&gt;Back then you could look at the download graphs of Rails and Ruby and it was
obvious that Rails was driving downloads of Ruby. Rails took Ruby out of
obscurity and some years later even many non-programmers had heard about this
web framework.&lt;/p&gt;

&lt;p&gt;It was very interesting to see how quickly Rails went from being used by a handful
of people to being the “it-framework” and the default choice for startups
that needed web based software. And some of them are now traded on the stock
market with market caps in the billions of dollars.&lt;/p&gt;

&lt;p&gt;One of them is Twitter. In 2009 Twitter had been experiencing a tremendous
growth of users and traffic. They decided to change core parts of their
infrastructure from Ruby to Scala.
The way Scala handles concurrency made it easier for Twitter to handle the
growth.&lt;/p&gt;

&lt;h2 id=&quot;erlang&quot;&gt;Erlang&lt;/h2&gt;

&lt;figure class=&quot;picture right_img&quot;&gt;
  &lt;img src=&quot;/assets/ericsson_box.jpg&quot; srcset=&quot;/assets/ericsson_box.jpg 1x, /assets/ericsson_box2x.jpg 2x&quot; /&gt;
  &lt;figcaption&gt;Ericsson equipment mounted on a lighthouse in Cabo Polonio, Uruguay&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure class=&quot;picture right_img&quot;&gt;
  &lt;img src=&quot;/assets/cabo_polonio.jpg&quot; srcset=&quot;/assets/cabo_polonio.jpg 1x, /assets/cabo_polonio2x.jpg 2x&quot; /&gt;
  &lt;figcaption&gt;View from the same lighthouse in Cabo Polonio, Uruguay&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;There is another language that is both functional and has an even longer
history of handling massive concurrency: Erlang.
It was made at Ericsson in the 1980s to allow for better
development of telephony applications.&lt;/p&gt;

&lt;p&gt;If you use 4G data on your phone it is more likely than not that the data is
going through equipment from Ericsson. And it runs Erlang. Have you ever thought about how
phone operators do not disconnect everyone’s phone calls in order to apply software updates?
Erlang is made to allow phone switch system to run continuously
and supports hotswapping: software updates while the software is running.&lt;/p&gt;

&lt;p&gt;Whatsapp have hundreds of millions of users.
On most other platforms &lt;a href=&quot;https://en.wikipedia.org/wiki/C10k_problem&quot;&gt;handling more than ten thousand concurrent connections
on one machine is seen as challenging&lt;/a&gt;, but Whatsapp have individual servers with more than 2
million concurrent connections. 2 million connections on a single server, handled by Erlang.&lt;/p&gt;

&lt;p&gt;Erlang is also popular for game servers. Millions of users
play multiplayer games with &lt;a href=&quot;http://www.erlang-factory.com/upload/presentations/395/ErlangandFirst-PersonShooters.pdf&quot;&gt;game server infrastructure handled by Erlang&lt;/a&gt;
for titles such as Call of Duty and Game of War.&lt;/p&gt;

&lt;p&gt;The Erlang platform has many advantages for serving reliable, scalable
internet applications, it has a proven track record and has been around for
decades. So why is it not a more popular choice for web development?&lt;/p&gt;

&lt;p&gt;I think part of it is that with Erlang it is not as easy to get up and running
with a new website. I do not think it is because the language is very hard to learn - it is not,
but often people will take the path of least resistance.
The Erlang syntax looks a bit strange if you are used to looking at languages
such as C, Java, JavaScript, PHP, Ruby, Perl etc. And things like package management,
build tools, meta-programming, unicode handling and web frameworks are not as straight forward as
in languages such as Ruby.&lt;/p&gt;

&lt;h2 id=&quot;elixir&quot;&gt;Elixir&lt;/h2&gt;

&lt;p&gt;But those areas are all addressed in Elixir. Elixir creator José Valim said: “I liked everything I saw in Erlang, but I
hated the things that I didn’t see”. Elixir has its own package management system,
macros, an easy to use build tool and unicode handling.&lt;/p&gt;

&lt;p&gt;Elixir is a language that runs on the Erlang VM. So it has all of the benefits
of the mature, battle proven system and you can use the existing Erlang
libraries with no performance penalty. And Elixir adds a bunch of niceties.
One of them is the &lt;a href=&quot;http://elixir-lang.org/docs/stable/elixir/Kernel.html#|&amp;gt;/2&quot;&gt;pipe operator&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The difference between Erlang and Elixir is not just the syntax. But syntax
does matter, and especially for Ruby developers the Elixir syntax will be very
familiar.&lt;/p&gt;

&lt;h2 id=&quot;immutability-and-functional-programming&quot;&gt;Immutability and functional programming&lt;/h2&gt;

&lt;p&gt;Elixir is a functional language with immutability.&lt;/p&gt;

&lt;p&gt;After having worked with immutable data for a while, I have realized how
beneficial it is. Even for single threaded
programming, mutability brings an uncertainty about how a program will execute.
And I do not miss the mutability at all. Functional programming
and immutability helps to clarify things and makes it easier to reason about code.&lt;/p&gt;

&lt;h2 id=&quot;concurrency&quot;&gt;Concurrency&lt;/h2&gt;

&lt;p&gt;Another strong point for Elixir is concurrency. Concurrency is here to stay, for several reasons.
To mention a few: The trend in hardware
is more and more CPU cores. The CPU manufacturers are not going
to improve single core performance at the same rate as before. Instead they are
adding more cores. Also the world is concurrent and you do not want
end users or other software services to needlessly wait for a response because your
single threaded software is busy.&lt;/p&gt;

&lt;p&gt;In most languages concurrency is a bit of a pain. Not only is it dangerous and
hard to do synchronization. With mutable state and forking of native processes it
is also often slow and uses a lot of memory.&lt;/p&gt;

&lt;p&gt;Doing concurrency in Erlang or Elixir versus other languages is a bit like
doing branches in &lt;a href=&quot;https://en.wikipedia.org/wiki/Git_software&quot;&gt;Git&lt;/a&gt; vs &lt;a href=&quot;https://en.wikipedia.org/wiki/Apache_Subversion&quot;&gt;Subversion&lt;/a&gt;. In subversion it was very complicated to
do - and I never did it. In Git it is a lot easier and I do it all the time.&lt;/p&gt;

&lt;p&gt;In Elixir it is very easy to create a new process and it performs
very well, so if the situation calls for it, it is straightforward to do.
It is an integral part of the platform and does not require a separate library.
Note that Erlang/Elixir processes are not native processes, they are much more light
weight and are scheduled by the Erlang BEAM virtual machine.&lt;/p&gt;

&lt;h2 id=&quot;web-framework&quot;&gt;Web framework&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.phoenixframework.org&quot;&gt;Phoenix&lt;/a&gt; is the most popular web framework for Elixir right now.
The creator of Elixir is a Rails core member and the creator of Phoenix
also has a background of working with Rails. While there is no desire to
simply recreate Rails in Elixir, it means that Phoenix is also
relatively easy to get started with because Rails has set certain minimum standards
in that regard.&lt;/p&gt;

&lt;p&gt;One of the most exciting features is the real time capabilities with channels
between javascript on the client and Elixir on any of the servers in the cluster.
Each single visitor to a website can have its own process on the server and its
own real time connection. This opens up possibilities that are not present in
traditional web frameworks.&lt;/p&gt;

&lt;p&gt;By the way, seeing &lt;strong&gt;μs&lt;/strong&gt; (the microsecond symbol) in web server logs
because of sub 1ms response times is quite nice ;) Efficiency and speed
are important for the end user experience, and also means less waste of
energy and money on servers.&lt;/p&gt;

&lt;h2 id=&quot;programmer-happiness-and-beautiful-code&quot;&gt;Programmer happiness and beautiful code&lt;/h2&gt;

&lt;p&gt;There are other languages that are faster than Ruby, but there are still
good reasons to use for instance Ruby over Java: it is a nice language to work with and you
can relatively quickly write concise code. Maybe Java code could perform better,
but in many cases the Java code would
not be as fun or quick to write, nor as easily maintainable.
So the argument of just buying more powerful
servers to make up for it can be a reasonable tradeoff in some cases. But what if you
did not have to make such a choice?&lt;/p&gt;

&lt;p&gt;With Elixir I do not feel like I trade any joy or speed of development for the
performance, reliability and concurrency benefits of the Erlang VM.
Elixir provides all of the Erlang benefits such as performance and reliability
without giving up the productivity benefits of Ruby.&lt;/p&gt;

&lt;h2 id=&quot;dj-vu&quot;&gt;Déjà vu&lt;/h2&gt;

&lt;p&gt;Like with Ruby 12 years ago, once again I feel that this new platform is so
much better than the other solutions. And it is not just a gut feeling, there
are rational arguments to back it up. Another similarity is that Dave Thomas
is also excited about Elixir and has written &lt;a href=&quot;http://www.amazon.com/gp/product/1937785580/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=1937785580&amp;amp;linkCode=as2&amp;amp;tag=creatdelet-20&amp;amp;linkId=WZ5O2FFECAC3DXQC&quot;&gt;a book about the language&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It is as if everything is aligned for Elixir to be the next new big thing
for web development.
In the last 10 years Ruby and Python have been popular choices for the web.
I think it is likely that in a few years Elixir instead will be the go-to
language for new web projects.&lt;/p&gt;
</description>
        <pubDate>Sun, 19 Apr 2015 19:00:00 -0300</pubDate>
        <link>http://www.creativedeletion.com/2015/04/19/elixir_next_language.html</link>
        <guid isPermaLink="true">http://www.creativedeletion.com/2015/04/19/elixir_next_language.html</guid>
        
        
      </item>
    
      <item>
        <title>How to save datetimes for future events - (when UTC is not the right answer)</title>
        <description>&lt;p&gt;Imagine that it’s January 2015 and you’re making an appointment in a calendar application for a
meeting that will take place in Santiago, Chile on the April 30th at 10:00 in the morning.&lt;/p&gt;

&lt;p&gt;Your calendar software saves the appointment and you can see that it’s there
with the description that you made. 2015-04-30 10:00 in Chile. You even checked the box
to get a reminder and think to yourself: “What a time to be alive”. Software
can remind us of meetings and keep track of timezones and we no longer have to
carry around big bulky paper calendars.&lt;/p&gt;

&lt;h2 id=&quot;software-saves-the-day&quot;&gt;Software saves the day?&lt;/h2&gt;

&lt;p&gt;April comes around and you are in Santiago and ready for the meeting you made.
You forgot the exact time of the meeting so you check your trusty calendar
software on your phone. “Ah yes, it’s at 11:00, exactly the time I saved.”&lt;/p&gt;

&lt;p&gt;But when you show up for your meeting you are surprised that actually the
meeting was at 10:00 and you are an hour late! How did that happen?&lt;/p&gt;

&lt;h2 id=&quot;the-deceit&quot;&gt;The deceit&lt;/h2&gt;

&lt;p&gt;&lt;img title=&quot;Santiago de Chile&quot; alt=&quot;Santiago de Chile&quot; src=&quot;/assets/santiago.jpg&quot; srcset=&quot;/assets/santiago2x.jpg 2x&quot; width=&quot;512&quot; height=&quot;303&quot; class=&quot;right_img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The software did not actually save the time 10:00.
Instead it converted the time to UTC (14:00) and saved that along with the timezone
of Santiago/Chile.&lt;/p&gt;

&lt;p&gt;But the software is smart and can convert it
back from UTC right? Well that just so happens to be a &lt;a href=&quot;/2015/01/28/falsehoods-programmers-date-time-zones.html&quot;&gt;falsehood&lt;/a&gt;.
In most cases, yes, you can convert back from UTC to the original timezone.
But when timezone rules change, converting back to the original timezone
can mean that you get a different result.&lt;/p&gt;

&lt;p&gt;And that is just what happens in this case. Because Chile
has decided to stop using Daylight Saving Time. Good for them. Instead of
going off of DST, Chile will essentially keep using the same offset
as they are currently on and not set their clock back in the autumn.
But back in the middle of January the rules were that they were supposed to go off of DST
and set their clocks backward an hour in April.&lt;/p&gt;

&lt;p&gt;So what happened was that your software got the newest timezone update. And then
when converting back from UTC it used the new rules, while the saved UTC time (14:00)
were based on the old rules. With the old rules you would have to subtract 4 hours,
but with the new rules only 3. And subtracting 3 hours from 14:00 you get 11:00
instead of 10:00.&lt;/p&gt;

&lt;p&gt;This story is not pure fantasy. You might not be going to Chile in April. But a lot of software actually works this way and
the time zone in Chile is actually announced to be changing as described.&lt;/p&gt;

&lt;h2 id=&quot;a-solution&quot;&gt;A solution&lt;/h2&gt;

&lt;p&gt;Instead of saving the time in UTC along with the time zone, developers can save
what the user expects us to save: the wall time. Ie. what the clock on the wall will say. In the example that would be 10:00. And we also save the timezone (Santiago/Chile).
This way we can convert back to UTC or any other timezone.&lt;/p&gt;

&lt;p&gt;To avoid ambigiuty we also save a third piece of data: the UTC offset. Note that the UTC offset is only
there for the rare tie-breaker cases when the timezone does not change, but when there is an ambiguity we know about at scheduling
time - that will usually be when the timezone goes off of DST and a range of time (usually an hour) happens twice
in autumn when clocks are set back. In this example though this third piece of data is not used for anything.&lt;/p&gt;

&lt;p&gt;In the rare cases where the time zone rules change such that the saved wall time
suddenly becomes &lt;a href=&quot;/2015/01/28/falsehoods-programmers-date-time-zones.html&quot;&gt;ambiguous or non existant&lt;/a&gt;, the saved UTC offset will not help us.
There is not
much we can do about that though, since we cannot foresee the future. If the
saved datetime becomes ambiguous or non existing, we will have to deal with
that situation by alerting the user.&lt;/p&gt;

&lt;p&gt;You could argue that converting to UTC and saving UTC you will never have an ambiguous or
non-existing datetime. That is true, but you have to ask yourself whether it is
better to tell the user something incorrect or tell the user the truth. If
you want your software to provide the most correct answers, this method is
superior to just saving UTC and a timezone.&lt;/p&gt;

&lt;p&gt;This solution is implemented in &lt;a href=&quot;https://github.com/lau/calecto&quot;&gt;Calecto&lt;/a&gt;: A &lt;a href=&quot;https://github.com/lau/calendar&quot;&gt;Calendar&lt;/a&gt;-Ecto plugin made by yours truly
for the &lt;a href=&quot;http://elixir-lang.org/&quot;&gt;Elixir language&lt;/a&gt;.
If you use Elixir with PostgreSQL and Ecto you can use &lt;a href=&quot;https://github.com/lau/calecto&quot;&gt;Calecto&lt;/a&gt; to avoid giving the
wrong answers when timezone change. Just use the Calendar.DateTime type.&lt;/p&gt;

&lt;h2 id=&quot;rule-of-thumb&quot;&gt;Rule of thumb&lt;/h2&gt;

&lt;p&gt;What if you are not saving a future time for a meeting? As a rule of thumb:
events that have happened in the recent past can safely be saved as UTC.
Examples are timestamps for when an email has been sent or a database
record has been saved. Your system knows the time in UTC and can save it in
UTC. And later you can always convert it to any other time zone.&lt;/p&gt;

&lt;p&gt;But in the case of future datetimes such as meetings: converting to UTC and
saving UTC + timezone name is not resistant to changes in time zone rules.
And remember, time zone rules change all the time.&lt;/p&gt;
</description>
        <pubDate>Thu, 19 Mar 2015 21:00:00 -0300</pubDate>
        <link>http://www.creativedeletion.com/2015/03/19/persisting_future_datetimes.html</link>
        <guid isPermaLink="true">http://www.creativedeletion.com/2015/03/19/persisting_future_datetimes.html</guid>
        
        
      </item>
    
      <item>
        <title>Falsehoods programmers believe about time and time zones</title>
        <description>&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Every day has 24 hours&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Counter example: Because of daylight saving time (DST) some days could have 23 hours and some could have 25 hours. Or some other amount of hours - whole or not.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;OK, but every day without DST changes is 86400 (60 * 60 * 24) seconds long&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some times the UTC offset for a time zone is changed.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;… at least in UTC&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;http://www.nextleapsecond.com/&quot;&gt;Leap seconds&lt;/a&gt; cause some days to have an extra second. And theoretically there could be negative leap seconds. Although negative leap seconds have not happened yet because the rotation of the earth so far has been slower than UTC, as it were, and not faster.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Week one of a year starts in January every year&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;January 1st is not always a monday so some days of an ISO week will be in different years. Example: 2014 December 28th belongs to week 1 of 2015.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;If I know what time zone someone is in and they just tell me the date and local time, I can always use software to find out what time that is in UTC&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If they are in the middle of changing from summertime to wintertime, the clock will be set back one hour. This means that an hour exists twice, so to speak. If the clock is set back to 2:00 and someone tells you that the local time was 2:17 for instance, you do not know if he is talking about 2:17 before the clocks were set back or 2:17 after the clocks were set back.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;DST always sets the clock back and forth by exactly one hour&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Throughout history there are examples of DST rules that set the clocks back and forth 2 hours or 30 minutes. A current example (h/t &lt;a href=&quot;https://twitter.com/derickr/status/560551074701275136&quot;&gt;Derick Rethans&lt;/a&gt;) is Australia/Lord_Howe which advances the clocks by 30 minutes for DST.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Countries that observe DST begin observing DST in the first half of the year and end observing DST in the last half of the year&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Not in the southern hemisphere, where summer time might begin in October and end in March.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;OK, but DST always starts around spring and continues until fall&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img title=&quot;Atlas mountains seen from Marrakesh, Morocco&quot; alt=&quot;Atlas mountains seen from Marrakesh, Morocco&quot; src=&quot;/assets/morocco_palms.jpg&quot; class=&quot;right_img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Except for Morocco, where in the middle of summer, DST is suspended for a month during Ramadan.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;If I have a timestamp for a future event, I can convert it to UTC, store it as UTC along with the time zone and be sure that I can reliably convert it back to the correct “wall time” in the future&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If time zone rules change in the mean time for the time zone in question, converting back from UTC to “local time” might produce a different result.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Time zone rules do not change&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In 2014 there were 10 updates to the &lt;a href=&quot;https://www.iana.org/time-zones&quot;&gt;Olson database&lt;/a&gt; released during the year.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;If I keep my operating system up to date by installing updates, my operating system will have all the newest time zone updates&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As of January 2015 the newest tzdata package for Ubuntu 14 has data from June 2014 and not the latest 2014j release from November 2014.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;CST is a unique identifier for a time zone (Central Standard Time in the USA)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CST is also used for: Cuba Summer Time, China Time, Central Standard Time (Australia). PST is used for Pakistan Standard Time and Pacific Standard Time. If you want a unique identifier for the time zone in the Pacific West of the USA it looks like this: “America/Los_Angeles”.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;If you have two UTC timestamps it is possible to calculate how many seconds will be between them even if one of the timestamps are a year into the future&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There might be &lt;a href=&quot;http://www.nextleapsecond.com/&quot;&gt;leap seconds&lt;/a&gt; introduced, but you cannot be sure when or how many. However they are announced at least 6 months in advance, so if none of the two times are more than 6 months in the future and you keep up with news about leap seconds you can calculate it.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;The date-time combination 2014 March 30th 2:20:42 is always valid&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In central European time zones such as Europe/Copenhagen, that time does not exist in local time because of DST making the clocks being advanced by an hour from 2:00 to 3:00. This causes an hour to be skipped.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;The time 23:59:60 is always invalid&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When leap seconds are inserted, a minute will be 61 seconds long.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;I can trust that if someone has written a library to handle date and time, it will work reasonably well&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Many people write libraries without knowing much about the domain. And developers who also do not know much about the domain will use those libraries. Often things will work fine for a long time if for instance you only deal with timezones in a few countries where the time zone rules do not change a lot. It works fine - until it does not. It can become a case of the blind library developers leading the blind library users.&lt;/p&gt;

&lt;p&gt;This text was inspired by other “falsehoods programmers believe” posts. And also by my experiences building a &lt;a href=&quot;http://github.com/lau/calendar&quot;&gt;tzdata parser and date-time library for Elixir&lt;/a&gt; and using other date-time libraries through the years.&lt;/p&gt;

&lt;p&gt;PS. This was meant as a thought provoking eye opener. But all of this might seem negative and not constructive. Pointing out problems without any solutions. What can you do, to avoid having these issues cause problems in the systems you develop? I plan to write posts about solutions, so check back here soon.&lt;/p&gt;
</description>
        <pubDate>Wed, 28 Jan 2015 13:22:57 -0200</pubDate>
        <link>http://www.creativedeletion.com/2015/01/28/falsehoods-programmers-date-time-zones.html</link>
        <guid isPermaLink="true">http://www.creativedeletion.com/2015/01/28/falsehoods-programmers-date-time-zones.html</guid>
        
        
      </item>
    
      <item>
        <title>World time is more than GMT offsets</title>
        <description>&lt;p&gt;A lot of technology today seems to ignore the complexities of world time, timezones and daylight savings. In fact, as far as I know, there doesn’t even seem to exist a good watch that makes it easy to accurately know the time around the world.&lt;/p&gt;

&lt;p&gt;The following picture is from Montevideo, Uruguay. It is 3 hours from GMT. And so is Nuuk (aka. Godthåb), Greenland. So while I am in Montevideo in South America I am sort of in the same time zone as Denmark - how about that? This time of year, though, most of Greenland observes DST, so local time in Nuuk is now GMT-2, not -3.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/clock.jpg&quot; width=&quot;452&quot; height=&quot;320&quot; alt=&quot;Clock in Montevideo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If only adjusting your clock to local time around the world was a question of offsets from GMT, figuring out the local time around the would be relatively easy. What really complicates things is summertime (aka. Daylight Savings Time or DST).&lt;/p&gt;

&lt;p&gt;In Venezuala there is a certain mad man in charge that wants to create a new seperate time zone! The timezones don’t change that often, but recently there has been changes regarding DST. In USA the days when DST starts and stops was changed in 2007. DST starts and begins on different dates in different countries. Some countries within a certain timezone have DST and some don’t. A European I know asked a local person in a northern African country “Tomorrow at this time, what time is it?” The local person looked very puzzled after hearing the odd question. DST isn’t used in that particular country.&lt;/p&gt;

&lt;p&gt;I don’t wear a watch regularly, but use my iPhone to get the time. When travelling to a different time zone, I can go to the time settings in the phone and select the city that I am in or a city that I think is in the same time zone. The iPhone will then use it’s internal clock and timezone information for the different cities to calculate the local time in the city in question.&lt;/p&gt;

&lt;p&gt;Recently I was in Buenos Aires and, since it is a big city, of course I could find it in the settings on the iPhone. But… I came to find out that my clock was not showing the correct local time. I talked to an employee in the hotel about it and he said that Argentina in 2007 had readopted DST.&lt;/p&gt;

&lt;p&gt;This change made by Argentina had not been reflected in my iPhone nor my &lt;a target=&quot;_blank&quot; href=&quot;http://www.amazon.com/gp/search?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;index=pc-hardware&amp;amp;keywords=macbook%20pro&amp;amp;linkCode=ur2&amp;amp;tag=creatdelet-20&amp;amp;linkId=LJYPT2NZA5CBNQCI&quot;&gt;MacBook Pro&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I learned that political changes can unexpectedly change timezones and DST. And current “world time” clocks don’t seem reflect these changes.&lt;/p&gt;

&lt;p&gt;A lot of technology is developed in Europe or the US, where timezones don’t change that often. And some software developers seem to assume that it works the same way around the world. For instance there is JavaScript software that get a visitors local time from his browser and compare it to GMT to get the visitors GMT offset. That’s fine if you know that the user is in the US for instance. But in most of the Carribean DST isn’t used and in some parts of South America DST is reversed along with summer and winter.&lt;/p&gt;

&lt;p&gt;Here’s the lesson for software developers: To accurately calculate a users time zone, knowing a GMT offset is not enough. Getting the closest (politically and geographically) city is best. Furthermore, time zones and DST policies change, so for a world clock to be up-to-date it should probably be updated with the newest time zone changes once a year or so.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;2015 update: This was written in 2008. Since then I have learned more about timezones and changes to timezone rules. One of those things is that timezone updates happen often. 10 times a year is not that unusual. So updating “once a year or so” will not be often enough in many cases. Today I would recommend to apply every timezone update as soon as it is released.&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 09 Apr 2008 23:50:00 -0300</pubDate>
        <link>http://www.creativedeletion.com/2008/04/09/world-time-is-more-than-gmt-offsets.html</link>
        <guid isPermaLink="true">http://www.creativedeletion.com/2008/04/09/world-time-is-more-than-gmt-offsets.html</guid>
        
        
      </item>
    
  </channel>
</rss>
